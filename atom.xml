<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>无名小栈</title>
  
  <subtitle>Dragonの</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-03-02T13:58:08.530Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>hailong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker实用篇</title>
    <link href="http://example.com/2022/03/02/mypage/"/>
    <id>http://example.com/2022/03/02/mypage/</id>
    <published>2022-03-02T11:09:30.000Z</published>
    <updated>2022-03-02T13:58:08.530Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker实用篇"><a href="#Docker实用篇" class="headerlink" title="Docker实用篇"></a>Docker实用篇</h1><h1 id="1-初识Docker"><a href="#1-初识Docker" class="headerlink" title="1.初识Docker"></a>1.初识Docker</h1><h2 id="1-1-什么是Docker"><a href="#1-1-什么是Docker" class="headerlink" title="1.1.什么是Docker"></a>1.1.什么是Docker</h2><p>微服务虽然具备各种各样的优势，但服务的拆分通用给部署带来了很大的麻烦。</p><ul><li>分布式系统中，依赖的组件非常多，不同组件之间部署时往往会产生一些冲突。</li><li>在数百上千台服务中重复部署，环境不一定一致，会遇到各种问题</li></ul><h3 id="1-1-1-应用部署的环境问题"><a href="#1-1-1-应用部署的环境问题" class="headerlink" title="1.1.1.应用部署的环境问题"></a>1.1.1.应用部署的环境问题</h3><p>大型项目组件较多，运行环境也较为复杂，部署时会碰到一些问题：</p><ul><li><p>依赖关系复杂，容易出现兼容性问题</p></li><li><p>开发、测试、生产环境有差异</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/DragonSuu/image-hosting@master/assets/image-20210731141907366.4f1p4oe0kg00.webp" alt="image-20210731141907366"></p><p>例如一个项目中，部署时需要依赖于node.js、Redis、RabbitMQ、MySQL等，这些服务部署时所需要的函数库、依赖项各不相同，甚至会有冲突。给部署带来了极大的困难。</p><h3 id="1-1-2-Docker解决依赖兼容问题"><a href="#1-1-2-Docker解决依赖兼容问题" class="headerlink" title="1.1.2.Docker解决依赖兼容问题"></a>1.1.2.Docker解决依赖兼容问题</h3><p>而Docker确巧妙的解决了这些问题，Docker是如何实现的呢？</p><p>Docker为了解决依赖的兼容问题的，采用了两个手段：</p><ul><li><p>将应用的Libs（函数库）、Deps（依赖）、配置与应用一起打包</p></li><li><p>将每个应用放到一个隔离<strong>容器</strong>去运行，避免互相干扰</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/DragonSuu/image-hosting@master/assets/image-20210731142219735.1g8kvz05z7b4.webp" alt="image-20210731142219735"></p><p>这样打包好的应用包中，既包含应用本身，也保护应用所需要的Libs、Deps，无需再操作系统上安装这些，自然就不存在不同应用之间的兼容问题了。</p><p>虽然解决了不同应用的兼容问题，但是开发、测试等环境会存在差异，操作系统版本也会有差异，怎么解决这些问题呢？</p><h3 id="1-1-3-Docker解决操作系统环境差异"><a href="#1-1-3-Docker解决操作系统环境差异" class="headerlink" title="1.1.3.Docker解决操作系统环境差异"></a>1.1.3.Docker解决操作系统环境差异</h3><p>要解决不同操作系统环境差异问题，必须先了解操作系统结构。以一个Ubuntu操作系统为例，结构如下：</p><p><img src="https://cdn.jsdelivr.net/gh/DragonSuu/image-hosting@master/assets/image-20210731143401460.51e8wo6mvwo0.webp" alt="image-20210731143401460"></p><p>结构包括：</p><ul><li>计算机硬件：例如CPU、内存、磁盘等</li><li>系统内核：所有Linux发行版的内核都是Linux，例如CentOS、Ubuntu、Fedora等。内核可以与计算机硬件交互，对外提供<strong>内核指令</strong>，用于操作计算机硬件。</li><li>系统应用：操作系统本身提供的应用、函数库。这些函数库是对内核指令的封装，使用更加方便。</li></ul><p>应用于计算机交互的流程如下：</p><p>1）应用调用操作系统应用（函数库），实现各种功能</p><p>2）系统函数库是对内核指令集的封装，会调用内核指令</p><p>3）内核指令操作计算机硬件</p><p>Ubuntu和CentOSpringBoot都是基于Linux内核，无非是系统应用不同，提供的函数库有差异：</p><p><img src="https://cdn.jsdelivr.net/gh/DragonSuu/image-hosting@master/assets/image-20210731144304990.aac7rqo80m0.webp" alt="image-20210731144304990"></p><p>此时，如果将一个Ubuntu版本的MySQL应用安装到CentOS系统，MySQL在调用Ubuntu函数库时，会发现找不到或者不匹配，就会报错了：</p><p><img src="https://cdn.jsdelivr.net/gh/DragonSuu/image-hosting@master/assets/image-20210731144458680.1klmovul6jj4.webp" alt="image-20210731144458680"></p><p>Docker如何解决不同系统环境的问题？</p><ul><li>Docker将用户程序与所需要调用的系统(比如Ubuntu)函数库一起打包</li><li>Docker运行到不同操作系统时，直接基于打包的函数库，借助于操作系统的Linux内核来运行</li></ul><p>如图：</p><p><img src="https://cdn.jsdelivr.net/gh/DragonSuu/image-hosting@master/assets/image-20210731144820638.1ptp2qptsn5s.webp" alt="image-20210731144820638"></p><h3 id="1-1-4-小结"><a href="#1-1-4-小结" class="headerlink" title="1.1.4.小结"></a>1.1.4.小结</h3><p>Docker如何解决大型项目依赖关系复杂，不同组件依赖的兼容性问题？</p><ul><li>Docker允许开发中将应用、依赖、函数库、配置一起<strong>打包</strong>，形成可移植镜像</li><li>Docker应用运行在容器中，使用沙箱机制，相互<strong>隔离</strong></li></ul><p>Docker如何解决开发、测试、生产环境有差异的问题？</p><ul><li>Docker镜像中包含完整运行环境，包括系统函数库，仅依赖系统的Linux内核，因此可以在任意Linux操作系统上运行</li></ul><p>Docker是一个快速交付应用、运行应用的技术，具备下列优势：</p><ul><li>可以将程序及其依赖、运行环境一起打包为一个镜像，可以迁移到任意Linux操作系统</li><li>运行时利用沙箱机制形成隔离容器，各个应用互不干扰</li><li>启动、移除都可以通过一行命令完成，方便快捷</li></ul><h2 id="1-2-Docker和虚拟机的区别"><a href="#1-2-Docker和虚拟机的区别" class="headerlink" title="1.2.Docker和虚拟机的区别"></a>1.2.Docker和虚拟机的区别</h2><p>Docker可以让一个应用在任何操作系统中非常方便的运行。而以前我们接触的虚拟机，也能在一个操作系统中，运行另外一个操作系统，保护系统中的任何应用。</p><p>两者有什么差异呢？</p><p><strong>虚拟机</strong>（virtual machine）是在操作系统中<strong>模拟</strong>硬件设备，然后运行另一个操作系统，比如在 Windows 系统里面运行 Ubuntu 系统，这样就可以运行任意的Ubuntu应用了。</p><p><strong>Docker</strong>仅仅是封装函数库，并没有模拟完整的操作系统，如图：</p><p><img src="https://cdn.jsdelivr.net/gh/DragonSuu/image-hosting@master/assets/image-20210731145914960.2rfkraox0160.webp" alt="image-20210731145914960"><br>对比来看：</p><p><img src="https://cdn.jsdelivr.net/gh/DragonSuu/image-hosting@master/assets/image-20210731152243765.58x7xlnhjjk0.webp" alt="image-20210731152243765"></p><p>小结：</p><p>Docker和虚拟机的差异：</p><ul><li><p>docker是一个系统进程；虚拟机是在操作系统中的操作系统</p></li><li><p>docker体积小、启动速度快、性能好；虚拟机体积大、启动速度慢、性能一般</p></li></ul><h2 id="1-3-Docker架构"><a href="#1-3-Docker架构" class="headerlink" title="1.3.Docker架构"></a>1.3.Docker架构</h2><h3 id="1-3-1-镜像和容器"><a href="#1-3-1-镜像和容器" class="headerlink" title="1.3.1.镜像和容器"></a>1.3.1.镜像和容器</h3><p>Docker中有几个重要的概念：</p><p><strong>镜像（Image）</strong>：Docker将应用程序及其所需的依赖、函数库、环境、配置等文件打包在一起，称为镜像。</p><p><strong>容器（Container）</strong>：镜像中的应用程序运行后形成的进程就是<strong>容器</strong>，只是Docker会给容器进程做隔离，对外不可见。</p><p>一切应用最终都是代码组成，都是硬盘中的一个个的字节形成的<strong>文件</strong>。只有运行时，才会加载到内存，形成进程。</p><p>而<strong>镜像</strong>，就是把一个应用在硬盘上的文件、及其运行环境、部分系统函数库文件一起打包形成的文件包。这个文件包是只读的。</p><p><strong>容器</strong>呢，就是将这些文件中编写的程序、函数加载到内存中允许，形成进程，只不过要隔离起来。因此一个镜像可以启动多次，形成多个容器进程。</p><p><img src="https://cdn.jsdelivr.net/gh/DragonSuu/image-hosting@master/assets/image-20210731141907366.4f1p4oe0kg00.webp" alt="image-20210731141907366"></p><p>例如你下载了一个QQ，如果我们将QQ在磁盘上的运行<strong>文件</strong>及其运行的操作系统依赖打包，形成QQ镜像。然后你可以启动多次，双开、甚至三开QQ，跟多个妹子聊天。</p><h3 id="1-3-2-DockerHub"><a href="#1-3-2-DockerHub" class="headerlink" title="1.3.2.DockerHub"></a>1.3.2.DockerHub</h3><p>开源应用程序非常多，打包这些应用往往是重复的劳动。为了避免这些重复劳动，人们就会将自己打包的应用镜像，例如Redis、MySQL镜像放到网络上，共享使用，就像GitHub的代码共享一样。</p><ul><li><p>DockerHub：DockerHub是一个官方的Docker镜像的托管平台。这样的平台称为Docker Registry。</p></li><li><p>国内也有类似于DockerHub 的公开服务，比如 <a href="https://c.163yun.com/hub">网易云镜像服务</a>、<a href="https://cr.console.aliyun.com/">阿里云镜像库</a>等。</p></li></ul><p>我们一方面可以将自己的镜像共享到DockerHub，另一方面也可以从DockerHub拉取镜像：</p><p><img src="https://cdn.jsdelivr.net/gh/DragonSuu/image-hosting@master/assets/image-20210731142219735.1g8kvz05z7b4.webp" alt="image-20210731142219735"></p><h3 id="1-3-3-Docker架构"><a href="#1-3-3-Docker架构" class="headerlink" title="1.3.3.Docker架构"></a>1.3.3.Docker架构</h3><p>我们要使用Docker来操作镜像、容器，就必须要安装Docker。</p><p>Docker是一个CS架构的程序，由两部分组成：</p><ul><li><p>服务端(server)：Docker守护进程，负责处理Docker指令，管理镜像、容器等</p></li><li><p>客户端(client)：通过命令或RestAPI向Docker服务端发送指令。可以在本地或远程向服务端发送指令。</p></li></ul><p>如图：</p><p><img src="https://cdn.jsdelivr.net/gh/DragonSuu/image-hosting@master/assets/image-20210731144820638.1ptp2qptsn5s.webp" alt="image-20210731144820638"></p><h3 id="1-3-4-小结"><a href="#1-3-4-小结" class="headerlink" title="1.3.4.小结"></a>1.3.4.小结</h3><p>镜像：</p><ul><li>将应用程序及其依赖、环境、配置打包在一起</li></ul><p>容器：</p><ul><li>镜像运行起来就是容器，一个镜像可以运行多个容器</li></ul><p>Docker结构：</p><ul><li><p>服务端：接收命令或远程请求，操作镜像或容器</p></li><li><p>客户端：发送命令或者请求到Docker服务端</p></li></ul><p>DockerHub：</p><ul><li>一个镜像托管的服务器，类似的还有阿里云镜像服务，统称为DockerRegistry</li></ul><h2 id="1-4-安装Docker"><a href="#1-4-安装Docker" class="headerlink" title="1.4.安装Docker"></a>1.4.安装Docker</h2><p>企业部署一般都是采用Linux操作系统，而其中又数CentOS发行版占比最多，因此我们在CentOS下安装Docker。参考课前资料中的文档：</p><p><img src="https://cdn.jsdelivr.net/gh/DragonSuu/image-hosting@master/assets/image-20210731144458680.1klmovul6jj4.webp" alt="image-20210731144458680"></p><h1 id="2-Docker的基本操作"><a href="#2-Docker的基本操作" class="headerlink" title="2.Docker的基本操作"></a>2.Docker的基本操作</h1><h2 id="2-1-镜像操作"><a href="#2-1-镜像操作" class="headerlink" title="2.1.镜像操作"></a>2.1.镜像操作</h2><h3 id="2-1-1-镜像名称"><a href="#2-1-1-镜像名称" class="headerlink" title="2.1.1.镜像名称"></a>2.1.1.镜像名称</h3><p>首先来看下镜像的名称组成：</p><ul><li>镜名称一般分两部分组成：[repository]:[tag]。</li><li>在没有指定tag时，默认是latest，代表最新版本的镜像</li></ul><p>如图：</p><p><img src="https://cdn.jsdelivr.net/gh/DragonSuu/image-hosting@master/assets/image-20210731155141362.5mtf13h8esw0.webp" alt="image-20210731155141362"><br>这里的mysql就是repository，5.7就是tag，合一起就是镜像名称，代表5.7版本的MySQL镜像。</p><h3 id="2-1-2-镜像命令"><a href="#2-1-2-镜像命令" class="headerlink" title="2.1.2.镜像命令"></a>2.1.2.镜像命令</h3><p>常见的镜像操作命令如图：</p><p><img src="https://cdn.jsdelivr.net/gh/DragonSuu/image-hosting@master/assets/image-20210731155649535.35lf8iax0p40.webp" alt="image-20210731155649535"></p><h3 id="2-1-3-案例1-拉取、查看镜像"><a href="#2-1-3-案例1-拉取、查看镜像" class="headerlink" title="2.1.3.案例1-拉取、查看镜像"></a>2.1.3.案例1-拉取、查看镜像</h3><p>需求：从DockerHub中拉取一个nginx镜像并查看</p><p>1）首先去镜像仓库搜索nginx镜像，比如<a href="https://hub.docker.com/">DockerHub</a>:</p><p><img src="https://cdn.jsdelivr.net/gh/DragonSuu/image-hosting@master/assets/image-20210731155844368.2uojv7ckhns0.webp" alt="image-20210731155844368"><br>2）根据查看到的镜像名称，拉取自己需要的镜像，通过命令：docker pull nginx</p><p><img src="https://cdn.jsdelivr.net/gh/DragonSuu/image-hosting@master/assets/image-20210731155856199.3lsq2alpjns0.webp" alt="image-20210731155856199"><br>3）通过命令：docker images 查看拉取到的镜像</p><p><img src="https://cdn.jsdelivr.net/gh/DragonSuu/image-hosting@master/assets/image-20210731155903037.cfxfxrkngvc.webp" alt="image-20210731155903037"></p><h3 id="2-1-4-案例2-保存、导入镜像"><a href="#2-1-4-案例2-保存、导入镜像" class="headerlink" title="2.1.4.案例2-保存、导入镜像"></a>2.1.4.案例2-保存、导入镜像</h3><p>需求：利用docker save将nginx镜像导出磁盘，然后再通过load加载回来</p><p>1）利用docker xx –help命令查看docker save和docker load的语法</p><p>例如，查看save命令用法，可以输入命令：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">docker save --help<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果：</p><p><img src="https://cdn.jsdelivr.net/gh/DragonSuu/image-hosting@master/assets/image-20210731161104732.3cu22gfhvdy0.webp" alt="image-20210731161104732"></p><p>命令格式：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker save -o [保存的目标文件名称] [镜像名称]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2）使用docker save导出镜像到磁盘 </p><p>运行命令：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">docker save -o nginx.tar nginx:latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果如图：</p><p><img src="https://cdn.jsdelivr.net/gh/DragonSuu/image-hosting@master/assets/image-20210731161354344.6u81hh03u4k0.webp" alt="image-20210731161354344"></p><p>3）使用docker load加载镜像</p><p>先删除本地的nginx镜像：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">docker rmi nginx:latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后运行命令，加载本地文件：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">docker load -i nginx.tar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果：</p><p><img src="https://cdn.jsdelivr.net/gh/DragonSuu/image-hosting@master/assets/image-20210731161746245.2fl4n7d429zw.webp" alt="image-20210731161746245"></p><h3 id="2-1-5-练习"><a href="#2-1-5-练习" class="headerlink" title="2.1.5.练习"></a>2.1.5.练习</h3><p>需求：去DockerHub搜索并拉取一个Redis镜像</p><p>目标：</p><p>1）去DockerHub搜索Redis镜像</p><p>2）查看Redis镜像的名称和版本</p><p>3）利用docker pull命令拉取镜像</p><p>4）利用docker save命令将 redis:latest打包为一个redis.tar包</p><p>5）利用docker rmi 删除本地的redis:latest</p><p>6）利用docker load 重新加载 redis.tar文件</p><h2 id="2-2-容器操作"><a href="#2-2-容器操作" class="headerlink" title="2.2.容器操作"></a>2.2.容器操作</h2><h3 id="2-2-1-容器相关命令"><a href="#2-2-1-容器相关命令" class="headerlink" title="2.2.1.容器相关命令"></a>2.2.1.容器相关命令</h3><p>容器操作的命令如图：</p><p><img src="https://cdn.jsdelivr.net/gh/DragonSuu/image-hosting@master/assets/image-20210731161950495.71521im3dxk0.webp" alt="image-20210731161950495"><br>容器保护三个状态：</p><ul><li>运行：进程正常运行</li><li>暂停：进程暂停，CPU不再运行，并不释放内存</li><li>停止：进程终止，回收进程占用的内存、CPU等资源</li></ul><p>其中：</p><ul><li>docker run：创建并运行一个容器，处于运行状态</li><li>docker pause：让一个运行的容器暂停</li><li>docker unpause：让一个容器从暂停状态恢复运行</li><li>docker stop：停止一个运行的容器</li><li><p>docker start：让一个停止的容器再次运行</p></li><li><p>docker rm：删除一个容器</p></li></ul><h3 id="2-2-2-案例-创建并运行一个容器"><a href="#2-2-2-案例-创建并运行一个容器" class="headerlink" title="2.2.2.案例-创建并运行一个容器"></a>2.2.2.案例-创建并运行一个容器</h3><p>创建并运行nginx容器的命令：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">docker run --name containerName -p 80:80 -d nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>命令解读：</p><ul><li>docker run ：创建并运行一个容器</li><li>–name : 给容器起一个名字，比如叫做mn</li><li>-p ：将宿主机端口与容器端口映射，冒号左侧是宿主机端口，右侧是容器端口</li><li>-d：后台运行容器</li><li>nginx：镜像名称，例如nginx</li></ul><p>这里的<code>-p</code>参数，是将容器端口映射到宿主机端口。</p><p>默认情况下，容器是隔离环境，我们直接访问宿主机的80端口，肯定访问不到容器中的nginx。</p><p>现在，将容器的80与宿主机的80关联起来，当我们访问宿主机的80端口时，就会被映射到容器的80，这样就能访问到nginx了：</p><p><img src="https://cdn.jsdelivr.net/gh/DragonSuu/image-hosting@master/assets/image-20210731163255863.7076nwfhjzc0.webp" alt="image-20210731163255863"></p><h3 id="2-2-3-案例-进入容器，修改文件"><a href="#2-2-3-案例-进入容器，修改文件" class="headerlink" title="2.2.3.案例-进入容器，修改文件"></a>2.2.3.案例-进入容器，修改文件</h3><p><strong>需求</strong>：进入Nginx容器，修改HTML文件内容，添加“传智教育欢迎您”</p><p><strong>提示</strong>：进入容器要用到docker exec命令。</p><p><strong>步骤</strong>：</p><p>1）进入容器。进入我们刚刚创建的nginx容器的命令为：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">docker exec -it mn bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>命令解读：</p><ul><li><p>docker exec ：进入容器内部，执行一个命令</p></li><li><p>-it : 给当前进入的容器创建一个标准输入、输出终端，允许我们与容器交互</p></li><li><p>mn ：要进入的容器的名称</p></li><li><p>bash：进入容器后执行的命令，bash是一个linux终端交互命令</p></li></ul><p>2）进入nginx的HTML所在目录 /usr/share/nginx/html</p><p>容器内部会模拟一个独立的Linux文件系统，看起来如同一个linux服务器一样：</p><p><img src="https://cdn.jsdelivr.net/gh/DragonSuu/image-hosting@master/assets/image-20210731164159811.1jsdwwoob68w.webp" alt="image-20210731164159811"><br>nginx的环境、配置、运行文件全部都在这个文件系统中，包括我们要修改的html文件。</p><p>查看DockerHub网站中的nginx页面，可以知道nginx的html目录位置在<code>/usr/share/nginx/html</code></p><p>我们执行命令，进入该目录：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">cd &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 查看目录下文件：</p><p><img src="https://cdn.jsdelivr.net/gh/DragonSuu/image-hosting@master/assets/image-20210731164455818.o5y1ly48vc0.webp" alt="image-20210731164455818"></p><p>3）修改index.html的内容</p><p>容器内没有vi命令，无法直接修改，我们用下面的命令来修改：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">sed -i -e &#39;s#Welcome to nginx#传智教育欢迎您#g&#39; -e &#39;s#&lt;head&gt;#&lt;head&gt;&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;#g&#39; index.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在浏览器访问自己的虚拟机地址，例如我的是：<a href="http://192.168.150.101，即可看到结果：">http://192.168.150.101，即可看到结果：</a></p><p><img src="https://cdn.jsdelivr.net/gh/DragonSuu/image-hosting@master/assets/image-20210731164717604.3jyr413ef460.webp" alt="image-20210731164717604"></p><h3 id="2-2-4-小结"><a href="#2-2-4-小结" class="headerlink" title="2.2.4.小结"></a>2.2.4.小结</h3><p>docker run命令的常见参数有哪些？</p><ul><li>–name：指定容器名称</li><li>-p：指定端口映射</li><li>-d：让容器后台运行</li></ul><p>查看容器日志的命令：</p><ul><li>docker logs</li><li>添加 -f 参数可以持续查看日志</li></ul><p>查看容器状态：</p><ul><li>docker ps</li><li>docker ps -a 查看所有容器，包括已经停止的</li></ul><h2 id="2-3-数据卷（容器数据管理）"><a href="#2-3-数据卷（容器数据管理）" class="headerlink" title="2.3.数据卷（容器数据管理）"></a>2.3.数据卷（容器数据管理）</h2><p>在之前的nginx案例中，修改nginx的html页面时，需要进入nginx内部。并且因为没有编辑器，修改文件也很麻烦。</p><p>这就是因为容器与数据（容器内文件）耦合带来的后果。</p><p><img src="https://cdn.jsdelivr.net/gh/DragonSuu/image-hosting@master/assets/image-20210731172440275.73mnq0wgcmk0.webp" alt="image-20210731172440275"><br>要解决这个问题，必须将数据与容器解耦，这就要用到数据卷了。</p><h3 id="2-3-1-什么是数据卷"><a href="#2-3-1-什么是数据卷" class="headerlink" title="2.3.1.什么是数据卷"></a>2.3.1.什么是数据卷</h3><p><strong>数据卷（volume）</strong>是一个虚拟目录，指向宿主机文件系统中的某个目录。</p><p><img src="https://cdn.jsdelivr.net/gh/DragonSuu/image-hosting@master/assets/image-20210731173541846.4o62puvt32c0.webp" alt="image-20210731173541846"><br>一旦完成数据卷挂载，对容器的一切操作都会作用在数据卷对应的宿主机目录了。</p><p>这样，我们操作宿主机的/var/lib/docker/volumes/html目录，就等于操作容器内的/usr/share/nginx/html目录了</p><h3 id="2-3-2-数据集操作命令"><a href="#2-3-2-数据集操作命令" class="headerlink" title="2.3.2.数据集操作命令"></a>2.3.2.数据集操作命令</h3><p>数据卷操作的基本语法如下：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">docker volume [COMMAND]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>docker volume命令是数据卷操作，根据命令后跟随的command来确定下一步的操作：</p><ul><li>create 创建一个volume</li><li>inspect 显示一个或多个volume的信息</li><li>ls 列出所有的volume</li><li>prune 删除未使用的volume</li><li>rm 删除一个或多个指定的volume</li></ul><h3 id="2-3-3-创建和查看数据卷"><a href="#2-3-3-创建和查看数据卷" class="headerlink" title="2.3.3.创建和查看数据卷"></a>2.3.3.创建和查看数据卷</h3><p><strong>需求</strong>：创建一个数据卷，并查看数据卷在宿主机的目录位置</p><p>① 创建数据卷</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">docker volume create html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>② 查看所有数据</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">docker volume ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果：</p><p><img src="https://cdn.jsdelivr.net/gh/DragonSuu/image-hosting@master/assets/image-20210731173746910.2h2hvgznt660.webp" alt="image-20210731173746910"></p><p>③ 查看数据卷详细信息卷</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">docker volume inspect html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果：</p><p><img src="https://cdn.jsdelivr.net/gh/DragonSuu/image-hosting@master/assets/image-20210731173809877.612ihezw2z80.webp" alt="image-20210731173809877"><br>可以看到，我们创建的html这个数据卷关联的宿主机目录为<code>/var/lib/docker/volumes/html/_data</code>目录。</p><p><strong>小结</strong>：</p><p>数据卷的作用：</p><ul><li>将容器与数据分离，解耦合，方便操作容器内数据，保证数据安全</li></ul><p>数据卷操作：</p><ul><li>docker volume create：创建数据卷</li><li>docker volume ls：查看所有数据卷</li><li>docker volume inspect：查看数据卷详细信息，包括关联的宿主机目录位置</li><li>docker volume rm：删除指定数据卷</li><li>docker volume prune：删除所有未使用的数据卷</li></ul><h3 id="2-3-4-挂载数据卷"><a href="#2-3-4-挂载数据卷" class="headerlink" title="2.3.4.挂载数据卷"></a>2.3.4.挂载数据卷</h3><p>我们在创建容器时，可以通过 -v 参数来挂载一个数据卷到某个容器内目录，命令格式如下：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">docker run \  --name 容器名 \  -v 卷名:容器目录 \  -p 主机端口:容器端口  镜像名:版本 \<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的-v就是挂载数据卷的命令：</p><ul><li><code>-v html:/root/htm</code> ：把html数据卷挂载到容器内的/root/html这个目录中</li></ul><h3 id="2-3-5-案例-给nginx挂载数据卷"><a href="#2-3-5-案例-给nginx挂载数据卷" class="headerlink" title="2.3.5.案例-给nginx挂载数据卷"></a>2.3.5.案例-给nginx挂载数据卷</h3><p><strong>需求</strong>：创建一个nginx容器，修改容器内的html目录内的index.html内容</p><p><strong>分析</strong>：上个案例中，我们进入nginx容器内部，已经知道nginx的html目录所在位置/usr/share/nginx/html ，我们需要把这个目录挂载到html这个数据卷上，方便操作其中的内容。</p><p><strong>提示</strong>：运行容器时使用 -v 参数挂载数据卷</p><p>步骤：</p><p>① 创建容器并挂载数据卷到容器内的HTML目录</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">docker run --name mn -v html:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html -p 80:80 -d nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>② 进入html数据卷所在位置，并修改HTML内容</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 查看html数据卷的位置docker volume inspect html# 进入该目录cd &#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;html&#x2F;_data# 修改文件vi index.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-6-案例-给MySQL挂载本地目录"><a href="#2-3-6-案例-给MySQL挂载本地目录" class="headerlink" title="2.3.6.案例-给MySQL挂载本地目录"></a>2.3.6.案例-给MySQL挂载本地目录</h3><p>容器不仅仅可以挂载数据卷，也可以直接挂载到宿主机目录上。关联关系如下：</p><ul><li>带数据卷模式：宿主机目录 –&gt; 数据卷 —&gt; 容器内目录</li><li>直接挂载模式：宿主机目录 —&gt; 容器内目录</li></ul><p>如图：</p><p><img src="https://cdn.jsdelivr.net/gh/DragonSuu/image-hosting@master/assets/image-20210731175155453.4wjys4frceg0.webp" alt="image-20210731175155453"><br><strong>语法</strong>：</p><p>目录挂载与数据卷挂载的语法是类似的：</p><ul><li>-v [宿主机目录]:[容器内目录]</li><li>-v [宿主机文件]:[容器内文件]</li></ul><p><strong>需求</strong>：创建并运行一个MySQL容器，将宿主机目录直接挂载到容器</p><p>实现思路如下：</p><p>1）在将课前资料中的mysql.tar文件上传到虚拟机，通过load命令加载为镜像</p><p>2）创建目录/tmp/mysql/data</p><p>3）创建目录/tmp/mysql/conf，将课前资料提供的hmy.cnf文件上传到/tmp/mysql/conf</p><p>4）去DockerHub查阅资料，创建并运行MySQL容器，要求：</p><p>① 挂载/tmp/mysql/data到mysql容器内数据存储目录</p><p>② 挂载/tmp/mysql/conf/hmy.cnf到mysql容器的配置文件</p><p>③ 设置MySQL密码</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">mysql容器中的数据文件-v &#x2F;my&#x2F;own&#x2F;datadir:&#x2F;var&#x2F;lib&#x2F;mysqlmysql容器的配置文件-v &#x2F;etc&#x2F;mysql&#x2F;conf.d# 直接挂载docker run -di --name&#x3D;mysql -e MYSQL_ROOT_PASSWORD&#x3D;123456 -p 13306:3306 \-v &#x2F;root&#x2F;mysql&#x2F;mysql.cnf:&#x2F;etc&#x2F;mysql&#x2F;conf.d&#x2F;mysql.cnf \-v &#x2F;root&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql \mysql:5.7#使用卷挂载docker volume create mysqlconfdocker volume create mysqldatadocker run --name&#x3D;mysql -p 13306:3306 \-e MYSQL_ROOT_PASSWORD&#x3D;root \-v mysqlconf:&#x2F;etc&#x2F;mysql&#x2F;conf.d \-v mysqldata:&#x2F;var&#x2F;lib&#x2F;mysql \-d mysql:5.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>-e 给容器添加环境变量设置</p><h3 id="2-3-7-小结"><a href="#2-3-7-小结" class="headerlink" title="2.3.7.小结"></a>2.3.7.小结</h3><p>docker run的命令中通过 -v 参数挂载文件或目录到容器中：</p><ul><li>-v volume名称:容器内目录</li><li>-v 宿主机文件:容器内文</li><li>-v 宿主机目录:容器内目录</li></ul><p>数据卷挂载与目录直接挂载的</p><ul><li>数据卷挂载耦合度低，由docker来管理目录，但是目录较深，不好找</li><li>目录挂载耦合度高，需要我们自己管理目录，不过目录容易寻找查看</li></ul><h1 id="3-Dockerfile自定义镜像"><a href="#3-Dockerfile自定义镜像" class="headerlink" title="3.Dockerfile自定义镜像"></a>3.Dockerfile自定义镜像</h1><p>常见的镜像在DockerHub就能找到，但是我们自己写的项目就必须自己构建镜像了。</p><p>而要自定义镜像，就必须先了解镜像的结构才行。</p><h2 id="3-1-镜像结构"><a href="#3-1-镜像结构" class="headerlink" title="3.1.镜像结构"></a>3.1.镜像结构</h2><p>镜像是将应用程序及其需要的系统函数库、环境、配置、依赖打包而成。</p><p>我们以MySQL为例，来看看镜像的组成结构：</p><p><img src="https://cdn.jsdelivr.net/gh/DragonSuu/image-hosting@master/assets/image-20210731175806273.6051a8k5hbw0.webp" alt="image-20210731175806273"></p><p>简单来说，镜像就是在系统函数库、运行环境基础上，添加应用程序文件、配置文件、依赖文件等组合，然后编写好启动脚本打包在一起形成的文件。</p><p>我们要构建镜像，其实就是实现上述打包的过程。</p><h2 id="3-2-Dockerfile语法"><a href="#3-2-Dockerfile语法" class="headerlink" title="3.2.Dockerfile语法"></a>3.2.Dockerfile语法</h2><p>构建自定义的镜像时，并不需要一个个文件去拷贝，打包。</p><p>我们只需要告诉Docker，我们的镜像的组成，需要哪些BaseImage、需要拷贝什么文件、需要安装什么依赖、启动脚本是什么，将来Docker会帮助我们构建镜像。</p><p>而描述上述信息的文件就是Dockerfile文件。</p><p><strong>Dockerfile</strong>就是一个文本文件，其中包含一个个的<strong>指令(Instruction)</strong>，用指令来说明要执行什么操作来构建镜像。每一个指令都会形成一层Layer。</p><p><img src="https://cdn.jsdelivr.net/gh/DragonSuu/image-hosting@master/assets/image-20210731180321133.38wuyndhp880.webp" alt="image-20210731180321133"></p><p>更新详细语法说明，请参考官网文档： <a href="https://docs.docker.com/engine/reference/builder">https://docs.docker.com/engine/reference/builder</a></p><h2 id="3-3-构建Java项目"><a href="#3-3-构建Java项目" class="headerlink" title="3.3.构建Java项目"></a>3.3.构建Java项目</h2><h3 id="3-3-1-基于Ubuntu构建Java项目"><a href="#3-3-1-基于Ubuntu构建Java项目" class="headerlink" title="3.3.1.基于Ubuntu构建Java项目"></a>3.3.1.基于Ubuntu构建Java项目</h3><p>需求：基于Ubuntu镜像构建一个新镜像，运行一个java项目</p><ul><li>步骤1：新建一个空文件夹docker-demo</li></ul><p><img src="https://cdn.jsdelivr.net/gh/DragonSuu/image-hosting@master/assets/image-20210801101207444.45b2fs87ita0.webp" alt="image-20210801101207444"></p><ul><li>步骤2：拷贝课前资料中的docker-demo.jar文件到docker-demo这个目录</li></ul><p><img src="https://cdn.jsdelivr.net/gh/DragonSuu/image-hosting@master/assets/image-20210801101314816.gur1tgwe6xc.webp" alt="image-20210801101314816"></p><ul><li>步骤3：拷贝课前资料中的jdk8.tar.gz文件到docker-demo这个目录</li></ul><p><img src="https://cdn.jsdelivr.net/gh/DragonSuu/image-hosting@master/assets/image-20210801101410200.gqbjebn1so8.webp" alt="image-20210801101410200"></p><ul><li>步骤4：拷贝课前资料提供的Dockerfile到docker-demo这个目录</li></ul><p><img src="https://cdn.jsdelivr.net/gh/DragonSuu/image-hosting@master/assets/image-20210801101455590.8pmgs9r0l9o.webp" alt="image-20210801101455590"><br>  其中的内容如下：</p>  <pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile"># 指定基础镜像FROM ubuntu:16.04# 配置环境变量，JDK的安装目录ENV JAVA_DIR&#x3D;&#x2F;usr&#x2F;local# 拷贝jdk和java项目的包COPY .&#x2F;jdk8.tar.gz $JAVA_DIR&#x2F;COPY .&#x2F;docker-demo.jar &#x2F;tmp&#x2F;app.jar# 安装JDKRUN cd $JAVA_DIR \ &amp;&amp; tar -xf .&#x2F;jdk8.tar.gz \ &amp;&amp; mv .&#x2F;jdk1.8.0_144 .&#x2F;java8# 配置环境变量ENV JAVA_HOME&#x3D;$JAVA_DIR&#x2F;java8ENV PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin# 暴露端口EXPOSE 8090# 入口，java项目的启动命令ENTRYPOINT java -jar &#x2F;tmp&#x2F;app.jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>步骤5：进入docker-demo</p><p>将准备好的docker-demo上传到虚拟机任意目录，然后进入docker-demo目录下</p></li><li><p>步骤6：运行命令：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">docker build -t javaweb:1.0 .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>最后访问 <a href="http://192.168.150.101:8090/hello/count，其中的ip改成你的虚拟机ip">http://192.168.150.101:8090/hello/count，其中的ip改成你的虚拟机ip</a></p><h3 id="3-3-2-基于java8构建Java项目"><a href="#3-3-2-基于java8构建Java项目" class="headerlink" title="3.3.2.基于java8构建Java项目"></a>3.3.2.基于java8构建Java项目</h3><p>虽然我们可以基于Ubuntu基础镜像，添加任意自己需要的安装包，构建镜像，但是却比较麻烦。所以大多数情况下，我们都可以在一些安装了部分软件的基础镜像上做改造。</p><p>例如，构建java项目的镜像，可以在已经准备了JDK的基础镜像基础上构建。</p><p>需求：基于java:8-alpine镜像，将一个Java项目构建为镜像</p><p>实现思路如下：</p><ul><li><p>① 新建一个空的目录，然后在目录中新建一个文件，命名为Dockerfile</p></li><li><p>② 拷贝课前资料提供的docker-demo.jar到这个目录中</p></li><li><p>③ 编写Dockerfile文件：</p><ul><li><p>a ）基于java:8-alpine作为基础镜像</p></li><li><p>b ）将app.jar拷贝到镜像中</p></li><li><p>c ）暴露端口</p></li><li><p>d ）编写入口ENTRYPOINT</p><p>内容如下：</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">FROM java:8-alpineCOPY .&#x2F;app.jar &#x2F;tmp&#x2F;app.jarEXPOSE 8090ENTRYPOINT java -jar &#x2F;tmp&#x2F;app.jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><ul><li><p>④ 使用docker build命令构建镜像</p></li><li><p>⑤ 使用docker run创建容器并运行</p></li></ul><h2 id="3-4-小结"><a href="#3-4-小结" class="headerlink" title="3.4.小结"></a>3.4.小结</h2><p>小结：</p><ol><li><p>Dockerfile的本质是一个文件，通过指令描述镜像的构建过程</p></li><li><p>Dockerfile的第一行必须是FROM，从一个基础镜像来构建</p></li><li><p>基础镜像可以是基本操作系统，如Ubuntu。也可以是其他人制作好的镜像，例如：java:8-alpine</p></li></ol><h1 id="4-Docker-Compose"><a href="#4-Docker-Compose" class="headerlink" title="4.Docker-Compose"></a>4.Docker-Compose</h1><p>Docker Compose可以基于Compose文件帮我们快速的部署分布式应用，而无需手动一个个创建和运行容器！</p><p><img src="https://cdn.jsdelivr.net/gh/DragonSuu/image-hosting@master/assets/image-20210731180921742.2rc88kujjhy0.webp" alt="image-20210731180921742"></p><h2 id="4-1-初识DockerCompose"><a href="#4-1-初识DockerCompose" class="headerlink" title="4.1.初识DockerCompose"></a>4.1.初识DockerCompose</h2><p>Compose文件是一个文本文件，通过指令定义集群中的每个容器如何运行。格式如下：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">version<span class="token operator">:</span> <span class="token string">"3.8"</span> services<span class="token operator">:</span>  mysql<span class="token operator">:</span>    image<span class="token operator">:</span> mysql<span class="token operator">:</span><span class="token number">5.7</span>.<span class="token number">25</span>    environment<span class="token operator">:</span>     MYSQL_ROOT_PASSWORD<span class="token operator">:</span> <span class="token number">123</span>     volumes<span class="token operator">:</span>     - <span class="token string">"/tmp/mysql/data:/var/lib/mysql"</span>     - <span class="token string">"/tmp/mysql/conf/hmy.cnf:/etc/mysql/conf.d/hmy.cnf"</span>  web<span class="token operator">:</span>    build<span class="token operator">:</span> .    ports<span class="token operator">:</span>     - <span class="token string">"8090:8090"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的Compose文件就描述一个项目，其中包含两个容器：</p><ul><li>mysql：一个基于<code>mysql:5.7.25</code>镜像构建的容器，并且挂载了两个目录</li><li>web：一个基于<code>docker build</code>临时构建的镜像容器，映射端口时8090</li></ul><p>DockerCompose的详细语法参考官网：<a href="https://docs.docker.com/compose/compose-file/">https://docs.docker.com/compose/compose-file/</a></p><p>其实DockerCompose文件可以看做是将多个docker run命令写到一个文件，只是语法稍有差异。</p><h2 id="4-2-安装DockerCompose"><a href="#4-2-安装DockerCompose" class="headerlink" title="4.2.安装DockerCompose"></a>4.2.安装DockerCompose</h2><p>参考课前资料</p><h2 id="4-3-部署微服务集群"><a href="#4-3-部署微服务集群" class="headerlink" title="4.3.部署微服务集群"></a>4.3.部署微服务集群</h2><p><strong>需求</strong>：将之前学习的cloud-demo微服务集群利用DockerCompose部署</p><p><strong>实现思路</strong>：</p><p>① 查看课前资料提供的cloud-demo文件夹，里面已经编写好了docker-compose文件</p><p>② 修改自己的cloud-demo项目，将数据库、nacos地址都命名为docker-compose中的服务名</p><p>③ 使用maven打包工具，将项目中的每个微服务都打包为app.jar</p><p>④ 将打包好的app.jar拷贝到cloud-demo中的每一个对应的子目录中</p><p>⑤ 将cloud-demo上传至虚拟机，利用 docker-compose up -d 来部署</p><h3 id="4-3-1-compose文件"><a href="#4-3-1-compose文件" class="headerlink" title="4.3.1.compose文件"></a>4.3.1.compose文件</h3><p>查看课前资料提供的cloud-demo文件夹，里面已经编写好了docker-compose文件，而且每个微服务都准备了一个独立的目录：</p><p><img src="https://cdn.jsdelivr.net/gh/DragonSuu/image-hosting@master/assets/image-20210731181341330.6q1l6dwpquw0.webp" alt="image-20210731181341330"><br>内容如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3.2"</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">nacos</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> nacos/nacos<span class="token punctuation">-</span>server    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">MODE</span><span class="token punctuation">:</span> standalone    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"8848:8848"</span>  <span class="token key atrule">mysql</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span>5.7.25    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> <span class="token number">123</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"$PWD/mysql/data:/var/lib/mysql"</span>      <span class="token punctuation">-</span> <span class="token string">"$PWD/mysql/conf:/etc/mysql/conf.d/"</span>  <span class="token key atrule">userservice</span><span class="token punctuation">:</span>    <span class="token key atrule">build</span><span class="token punctuation">:</span> ./user<span class="token punctuation">-</span>service  <span class="token key atrule">orderservice</span><span class="token punctuation">:</span>    <span class="token key atrule">build</span><span class="token punctuation">:</span> ./order<span class="token punctuation">-</span>service  <span class="token key atrule">gateway</span><span class="token punctuation">:</span>    <span class="token key atrule">build</span><span class="token punctuation">:</span> ./gateway    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"10010:10010"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，其中包含5个service服务：</p><ul><li><code>nacos</code>：作为注册中心和配置中心<ul><li><code>image: nacos/nacos-server</code>： 基于nacos/nacos-server镜像构建</li><li><code>environment</code>：环境变量<ul><li><code>MODE: standalone</code>：单点模式启动</li></ul></li><li><code>ports</code>：端口映射，这里暴露了8848端口</li></ul></li><li><code>mysql</code>：数据库<ul><li><code>image: mysql:5.7.25</code>：镜像版本是mysql:5.7.25</li><li><code>environment</code>：环境变量<ul><li><code>MYSQL_ROOT_PASSWORD: 123</code>：设置数据库root账户的密码为123</li></ul></li><li><code>volumes</code>：数据卷挂载，这里挂载了mysql的data、conf目录，其中有我提前准备好的数据</li></ul></li><li><code>userservice</code>、<code>orderservice</code>、<code>gateway</code>：都是基于Dockerfile临时构建的</li></ul><p>查看mysql目录，可以看到其中已经准备好了cloud_order、cloud_user表：</p><p><img src="https://cdn.jsdelivr.net/gh/DragonSuu/image-hosting@master/assets/image-20210801095205034.1e42nia5flpc.webp" alt="image-20210801095205034"><br>查看微服务目录，可以看到都包含Dockerfile文件：</p><p><img src="https://cdn.jsdelivr.net/gh/DragonSuu/image-hosting@master/assets/image-20210801095320586.38a7ohylxuy0.webp" alt="image-20210801095320586"><br>内容如下：</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">FROM java:8-alpineCOPY .&#x2F;app.jar &#x2F;tmp&#x2F;app.jarENTRYPOINT java -jar &#x2F;tmp&#x2F;app.jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-3-2-修改微服务配置"><a href="#4-3-2-修改微服务配置" class="headerlink" title="4.3.2.修改微服务配置"></a>4.3.2.修改微服务配置</h3><p>因为微服务将来要部署为docker容器，而容器之间互联不是通过IP地址，而是通过容器名。这里我们将order-service、user-service、gateway服务的mysql、nacos地址都修改为基于容器名的访问。</p><p>如下所示：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//mysql<span class="token punctuation">:</span>3306/cloud_order<span class="token punctuation">?</span>useSSL=false    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> orderservice  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> nacos<span class="token punctuation">:</span><span class="token number">8848</span> <span class="token comment"># nacos服务地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-3-打包"><a href="#4-3-3-打包" class="headerlink" title="4.3.3.打包"></a>4.3.3.打包</h3><p>接下来需要将我们的每个微服务都打包。因为之前查看到Dockerfile中的jar包名称都是app.jar，因此我们的每个微服务都需要用这个名称。</p><p>可以通过修改pom.xml中的打包名称来实现，每个微服务都需要修改：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 服务打包的最终名称 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">></span></span>app<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打包后：</p><p><img src="https://cdn.jsdelivr.net/gh/DragonSuu/image-hosting@master/assets/image-20210801095951030.78tg0yldgq40.webp" alt="image-20210801095951030"></p><h3 id="4-3-4-拷贝jar包到部署目录"><a href="#4-3-4-拷贝jar包到部署目录" class="headerlink" title="4.3.4.拷贝jar包到部署目录"></a>4.3.4.拷贝jar包到部署目录</h3><p>编译打包好的app.jar文件，需要放到Dockerfile的同级目录中。注意：每个微服务的app.jar放到与服务名称对应的目录，别搞错了。</p><p>user-service：</p><p><img src="https://cdn.jsdelivr.net/gh/DragonSuu/image-hosting@master/assets/image-20210801100201253.3g3iwerqeey0.webp" alt="image-20210801100201253"><br>order-service：</p><p><img src="https://cdn.jsdelivr.net/gh/DragonSuu/image-hosting@master/assets/image-20210801100231495.5kfr4ynjr6o0.webp" alt="image-20210801100231495"><br>gateway：</p><p><img src="https://cdn.jsdelivr.net/gh/DragonSuu/image-hosting@master/assets/image-20210801100308102.4qetdivncy00.webp" alt="image-20210801100308102"></p><h3 id="4-3-5-部署"><a href="#4-3-5-部署" class="headerlink" title="4.3.5.部署"></a>4.3.5.部署</h3><p>最后，我们需要将文件整个cloud-demo文件夹上传到虚拟机中，理由DockerCompose部署。</p><p>上传到任意目录：</p><p><img src="https://cdn.jsdelivr.net/gh/DragonSuu/image-hosting@master/assets/image-20210801100955653.d7knrjvew7.webp" alt="image-20210801100955653">部署：</p><p>进入cloud-demo目录，然后运行下面的命令：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">docker-compose up -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="5-Docker镜像仓库"><a href="#5-Docker镜像仓库" class="headerlink" title="5.Docker镜像仓库"></a>5.Docker镜像仓库</h1><h2 id="5-1-搭建私有镜像仓库"><a href="#5-1-搭建私有镜像仓库" class="headerlink" title="5.1.搭建私有镜像仓库"></a>5.1.搭建私有镜像仓库</h2><p>参考课前资料《CentOS7安装Docker.md》</p><h2 id="5-2-推送、拉取镜像"><a href="#5-2-推送、拉取镜像" class="headerlink" title="5.2.推送、拉取镜像"></a>5.2.推送、拉取镜像</h2><p>推送镜像到私有镜像服务必须先tag，步骤如下：</p><p>① 重新tag本地镜像，名称前缀为私有仓库的地址：192.168.150.101:8080/</p> <pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">docker tag nginx:latest 192.168.150.101:8080&#x2F;nginx:1.0 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>② 推送镜像</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">docker push 192.168.150.101:8080&#x2F;nginx:1.0 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>③ 拉取镜像</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">docker pull 192.168.150.101:8080&#x2F;nginx:1.0 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Docker实用篇&quot;&gt;&lt;a href=&quot;#Docker实用篇&quot; class=&quot;headerlink&quot; title=&quot;Docker实用篇&quot;&gt;&lt;/a&gt;Docker实用篇&lt;/h1&gt;&lt;h1 id=&quot;1-初识Docker&quot;&gt;&lt;a href=&quot;#1-初识Docker&quot; cla
      
    
    </summary>
    
    
      <category term="技术分享" scheme="http://example.com/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>CSS</title>
    <link href="http://example.com/2021/04/17/CSS/"/>
    <id>http://example.com/2021/04/17/CSS/</id>
    <published>2021-04-17T11:37:41.000Z</published>
    <updated>2021-04-18T07:37:41.356Z</updated>
    
    <content type="html"><![CDATA[<p>CSS（Cascading Style Sheets）：层迭样式表，定义如何显示<a href="https://10.151.110.165/wiki/index.php/HTML">HTML</a>元素，样式通常存储在样式表中，解决内容与表现分离的问题，多个样式定义可层迭为一个。主要目的在于增加开发速度、易维护、易变更样式。</p><hr><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><ul><li><p>使用方式</p><ol><li>引用 CSS 档案：<code>&lt;link rel=&quot;stylesheet&quot; href=&quot;CSS档案&quot; /&gt;</code></li><li>使用 HTML 标籤：<code>&lt;style&gt;&lt;/style&gt;</code></li><li>在 element 增加 style 属性:</li></ol><p><img src="C:\Users\F1684426\Desktop\相关技术Doc\css\Css_path.jpg" style="zoom:50%;" /></p></li><li><p>开发规则</p><ol><li>CSS 的定义应该独立一个 CSS 档案，<strong>禁止使用<code>&lt;style&gt;</code></strong> 直接在 HTML 中定义。</li><li>单次性 CSS 样式可直接在 element 中使用 style 属性定义，重複性 CSS 样式一律在 CSS 档案中定义。</li></ol></li><li><p>命名规则</p><ul><li><p>常用命名范围</p><p> —id</p><p>—class</p></li></ul></li><li><p>命名规则</p><p>​       —小写英文字母</p><p>​       —「-」</p></li><li><p>范例</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user-id<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-id<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-class<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>格式</p><ul><li>CSS 规则由两个主要的部分构成：<strong>选择器</strong>，以及一条或多条<strong>声明</strong>:</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">h1</span><span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>组成元素</p><p>​        选择器 (Selector)</p><ul><li>取得<a href="https://10.151.110.165/wiki/index.php/HTML">HTML</a>中的 Elements</li><li>选择核心：<strong>id</strong>、 <strong>class</strong>、 标籤名称 (tag name)、标籤属性</li></ul></li><li><p>全部选取</p><ul><li>所有元素皆套用此 CSS 定义</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">*</span><span class="token punctuation">&#123;</span>   ...<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>以 id 选取</p><ul><li>需先在 element 上给予 id 属性，HTML元素以id属性来设置id选择器，CSS中id选择器以“<strong>#</strong>”来定义</li><li>唯一性：同一个网页相同 id 的 element 只能有一个</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/** 在css中 **/</span><span class="token selector">#tag-id</span><span class="token punctuation">&#123;</span>  ……<span class="token punctuation">&#125;</span><span class="token comment">/** 在html中 **/</span>&lt;tag id=<span class="token string">"tag-id"</span>>&lt;/tag><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>以 class 选取</p><ul><li><p>需先在 element 上给予 class 属性,HTML元素以class属性来设置id选择器，CSS中class选择器以“<strong>.</strong>”来定义</p></li><li><p>重複性：</p><ul><li>一个 class 可以被很多个 element 使用</li><li>一个 element 可以有很多个 class (以空白间隔)</li></ul></li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/** 在css中 **/</span><span class="token selector">.class-name</span><span class="token punctuation">&#123;</span>  ……<span class="token punctuation">&#125;</span><span class="token comment">/** 在html中 **/</span>&lt;tag class=<span class="token string">"class-name1class-name2class-name3"</span>>&lt;/tag><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>以标籤名称选取 (tag name)</p><ul><li>所有相同的标籤名称都会被选取</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">tag-name</span><span class="token punctuation">&#123;</span>  ……<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>以属性选取 (attribute)</p><ul><li>所有具有该属性，不论属性值为何都会被选取</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">[tag-attribute]</span><span class="token punctuation">&#123;</span>  ……<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>以属性值选取 (attribute-value)</p></li><li><p>符合指定属性与其属性值的元素才会被选取</p></li><li><p>运算子</p><ul><li>= 完全相符关键字</li><li>*= 完全相符关键字，或包含「关键字」</li><li>~= 完全相符关键字，或包含「关键字」 「关键字 」「关键字 」</li><li>^= 完全相符关键字，或以「关键字」开头</li><li>|= 完全相符关键字，或以「关键字」「关键字-」开头</li><li>$= 完全相符关键字，或以「关键字」结尾</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">[tag-attribute=keyword]</span><span class="token punctuation">&#123;</span>  ……<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>执行</p><ul><li><p>执行效率(由快到慢)</p><ol><li>id (#)</li><li>class (.)</li><li>tag (tag-name)</li><li>Sibling Selector (+)</li><li>Child (&gt;)</li><li>Descendant ()</li><li>Universal (*)</li><li>Attribute (attribute=”value”)</li></ol></li><li><p>执行方式</p><ul><li><p>关键选择器 (Key Selector)</p><ul><li>连续选择器中最右边的选择器</li><li>Browser 第一个寻找的规则</li></ul></li><li><p>过分限制</p><ul><li>撰写多馀不必要的 Selector</li></ul></li><li><p>由右至左执行</p><p>​        效率差</p><p>​        执行步骤（#nava）</p><ol><li>先找出 document 中所有的 a</li><li>再回到 Dom Tree 中看看哪个 a 住在 #nav 下</li></ol></li></ul></li></ul></li></ul><p><img src=".\css\Css_carry.jpg" style="zoom:50%;" /></p><ul><li><p>注意事项</p><ul><li>模糊选取：<ul><li>共用型样式</li><li>日后增加的元素也会套用的样式</li></ul></li><li>精准选取<ul><li>专属型样式</li><li>不被其他元素套用的样式</li></ul></li></ul></li><li><p>ss选择器说明：</p></li></ul><table><thead><tr><th style="text-align:center"><strong>选择器</strong></th><th style="text-align:center"><strong>示例</strong></th><th style="text-align:center"><strong>示例说明</strong></th></tr></thead><tbody><tr><td style="text-align:center">class</td><td style="text-align:center">.intro</td><td style="text-align:center">选择所有class=”intro”的元素</td></tr><tr><td style="text-align:center">#id</td><td style="text-align:center">#firstname</td><td style="text-align:center">选择所有id=”firstname”的元素</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">*</td><td style="text-align:center">选择所有元素</td></tr><tr><td style="text-align:center">element</td><td style="text-align:center">p</td><td style="text-align:center">选择所有<p>元素</td></tr><tr><td style="text-align:center">element,element</td><td style="text-align:center">div,p</td><td style="text-align:center">选择所有<div>元素和<p>元素</td></tr><tr><td style="text-align:center">element element</td><td style="text-align:center">div p</td><td style="text-align:center">选择<div>元素内的所有<p>元素</td></tr><tr><td style="text-align:center">element&gt;element</td><td style="text-align:center">div&gt;p</td><td style="text-align:center">选择所有父级是 <div> 元素的 <p> 元素</td></tr><tr><td style="text-align:center">element+element</td><td style="text-align:center">div+p</td><td style="text-align:center">选择所有紧接着<div>元素之后的<p>元素</td></tr><tr><td style="text-align:center">[attribute]</td><td style="text-align:center">[target]</td><td style="text-align:center">选择所有带有target属性元素</td></tr><tr><td style="text-align:center">[attribute=value]</td><td style="text-align:center">[target=-blank]</td><td style="text-align:center">选择所有使用target=”-blank”的元素</td></tr><tr><td style="text-align:center">[attribute~=value]</td><td style="text-align:center">[title~=flower]</td><td style="text-align:center">选择标题属性包含单词”flower”的所有元素</td></tr><tr><td style="text-align:center">[attribute=language]</td><td style="text-align:center">[lang=en]</td><td style="text-align:center">选择 lang 属性以 en 为开头的所有元素</td></tr><tr><td style="text-align:center">:link</td><td style="text-align:center">a:link</td><td style="text-align:center">选择所有未访问链接</td></tr><tr><td style="text-align:center">:visited</td><td style="text-align:center">a:visited</td><td style="text-align:center">选择所有访问过的链接</td></tr><tr><td style="text-align:center">:active</td><td style="text-align:center">a:active</td><td style="text-align:center">选择活动链接</td></tr><tr><td style="text-align:center">:hover</td><td style="text-align:center">a:hover</td><td style="text-align:center">选择鼠标在链接上面时</td></tr><tr><td style="text-align:center">:focus</td><td style="text-align:center">input:focus</td><td style="text-align:center">选择具有焦点的输入元素</td></tr><tr><td style="text-align:center">:first-letter</td><td style="text-align:center">p:first-letter</td><td style="text-align:center">选择具有焦点的输入元素</td></tr><tr><td style="text-align:center">:first-line</td><td style="text-align:center">p:first-line</td><td style="text-align:center">选择每一个<p>元素的第一行</td></tr><tr><td style="text-align:center">:first-child</td><td style="text-align:center">p:first-child</td><td style="text-align:center">指定只有当<p>元素是其父级的第一个子级的样式</td></tr><tr><td style="text-align:center">:before</td><td style="text-align:center">p:before</td><td style="text-align:center">在每个<p>元素之前插入内容</td></tr><tr><td style="text-align:center">:after</td><td style="text-align:center">p:after</td><td style="text-align:center">在每个<p>元素之后插入内容</td></tr><tr><td style="text-align:center">:lang(language)</td><td style="text-align:center">p:lang(it)</td><td style="text-align:center">选择一个lang属性的起始值=”it”的所有<p>元素</td></tr><tr><td style="text-align:center">element1~element2</td><td style="text-align:center">p~ul</td><td style="text-align:center">选择<p>元素之后的每一个ul元素</td></tr><tr><td style="text-align:center">[attribute^=value]</td><td style="text-align:center">a[src^=”https”]</td><td style="text-align:center">选择每一个src属性的值以”https”开头的元素</td></tr><tr><td style="text-align:center">[attribute$=value]</td><td style="text-align:center">a[src$=”.pdf”]</td><td style="text-align:center">选择每一个src属性的值以”.pdf”结尾的元素</td></tr><tr><td style="text-align:center">[attribute*=value]</td><td style="text-align:center">a[src*=”runoob”]</td><td style="text-align:center">选择每一个src属性的值包含子字符串”runoob”的元素</td></tr><tr><td style="text-align:center">:first-of-type</td><td style="text-align:center">p:first-of-type</td><td style="text-align:center">选择每个p元素是其父级的第一个p元素</td></tr><tr><td style="text-align:center">:last-of-type</td><td style="text-align:center">p:last-of-type</td><td style="text-align:center">选择每个p元素是其父级的最后一个p元素</td></tr><tr><td style="text-align:center">:only-of-type</td><td style="text-align:center">p:only-of-type</td><td style="text-align:center">选择每个p元素是其父级的唯一p元素</td></tr><tr><td style="text-align:center">:only-child</td><td style="text-align:center">p:only-child</td><td style="text-align:center">选择每个p元素是其父级的唯一子元素</td></tr><tr><td style="text-align:center">:nth-child(n)</td><td style="text-align:center">p:nth-child(2)</td><td style="text-align:center">选择每个p元素是其父级的第二个子元素</td></tr><tr><td style="text-align:center">:nth-last-child(n)</td><td style="text-align:center">p:nth-last-child(2)</td><td style="text-align:center">选择每个p元素的是其父级的第二个子元素，从最后一个子项计数</td></tr><tr><td style="text-align:center">:nth-of-type(n)</td><td style="text-align:center">p:nth-of-type(2)</td><td style="text-align:center">选择每个p元素是其父级的第二个p元素</td></tr><tr><td style="text-align:center">:nth-last-of-type(n)</td><td style="text-align:center">p:nth-last-of-type(2)</td><td style="text-align:center">选择每个p元素的是其父级的第二个p元素，从最后一个子项计数</td></tr><tr><td style="text-align:center">:last-child</td><td style="text-align:center">p:last-child</td><td style="text-align:center">选择每个p元素是其父级的最后一个子级</td></tr><tr><td style="text-align:center">:root</td><td style="text-align:center">:root</td><td style="text-align:center">选择文档的根元素</td></tr><tr><td style="text-align:center">:empty</td><td style="text-align:center">p:empty</td><td style="text-align:center">选择每个没有任何子级的p元素（包括文本节点）</td></tr></tbody></table><h4 id="伪类、伪元素"><a href="#伪类、伪元素" class="headerlink" title="伪类、伪元素"></a>伪类、伪元素</h4><ul><li><strong>伪类别</strong> (Pseudo classes)：由 CSS 定义的<strong>假类别</strong>，可用于添加一些选择器的特殊效果</li></ul><table><thead><tr><th style="text-align:center"><strong>选择器</strong></th><th style="text-align:center"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:center">:hover</td><td style="text-align:center">当滑鼠移过元素时</td></tr><tr><td style="text-align:center">:focus</td><td style="text-align:center">当元素被 focus 时</td></tr><tr><td style="text-align:center">:active</td><td style="text-align:center">当元素执行时</td></tr><tr><td style="text-align:center">:target</td><td style="text-align:center">当元素被呼叫时</td></tr><tr><td style="text-align:center">:first-child</td><td style="text-align:center">当元素为第一个子节点时</td></tr><tr><td style="text-align:center">:last-child</td><td style="text-align:center">当元素为最后一个子节点时</td></tr></tbody></table><ul><li><strong>伪元素</strong> (Pseudo elements)：由 CSS 定义的<strong>假元素</strong> (不存在HTML内)</li></ul><table><thead><tr><th style="text-align:center"><strong>选择器</strong></th><th style="text-align:center"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:center">:first-line</td><td style="text-align:center">第一行</td></tr><tr><td style="text-align:center">:first-letter</td><td style="text-align:center">第一个字</td></tr><tr><td style="text-align:center">:before</td><td style="text-align:center">元素内容之前</td></tr><tr><td style="text-align:center">:after</td><td style="text-align:center">元素内容之后</td></tr></tbody></table><h3 id="Box-Model"><a href="#Box-Model" class="headerlink" title="Box Model"></a>Box Model</h3><ul><li><p>所有<a href="https://10.151.110.165/wiki/index.php/HTML">HTML</a>元素可以看作盒子，在css中Box Model是用来设计和佈局时使用的，盒子模型允许我们在其它元素和周围元素边框之间的空间放置元素</p></li><li><p>Element 组成要素</p></li></ul><p><img src="./css/Box_element.jpg" alt=""></p><ul><li>margin 外边距:框线 (border) 到父节点 (parent node) 或相邻节点 (sibling node) 的距离</li></ul><p><img src="./css/Box_margin.jpg" alt=""></p><ul><li>border 框线</li></ul><p><img src="./css/Box_border.jpg" alt=""></p><ul><li>padding 内边距:内容 (inner HTML) 到框线 (border) 的距离</li></ul><p><img src="./css/Box_padding.jpg" alt=""></p><ul><li><p>inner HTML 内容</p><p>height:内容 (inner HTML) 的高度 (height)</p></li></ul><p><img src="./css/Box_height.jpg" alt=""></p><p>​     width:内容 (inner HTML) 的宽度 (Width)</p><p><img src="./css/Box_width.jpg" alt=""></p><p>​     Outer Height:元素实际佔用高度，包含 margin, border, padding, height</p><p><img src="./css/Box_out_height.jpg" alt=""></p><ul><li>background:元素背景，包含 border, padding, innerHTML</li></ul><p><img src="./css/Box_bgcolor.jpg" alt=""></p><ul><li>最大值和最小值<ul><li>max-width 最大宽度</li><li>min-width 最小宽度</li><li>max-height 最大高度</li><li>min-height 最小高度</li></ul></li></ul><h3 id="样式申明"><a href="#样式申明" class="headerlink" title="样式申明"></a>样式申明</h3><hr><h4 id="文字样式"><a href="#文字样式" class="headerlink" title="文字样式"></a>文字样式</h4><ul><li><p>color文字颜色</p><p>Color name:black blue red等</p><p>rgb:(Red,Green,Blue)</p><p>rgba:(Red,Green,Blue,Alpha “0~1之间的值，0 完全透明，1完全不透明”)</p><p>Hex:#ffffff</p></li><li><p>font 字体样式</p><p>font-style字元样式:normal正常(default),italic斜体,</p><p>font-weight字元粗细:normal正常 (default),bold粗,bolder更粗</p><p>font-size字元大小</p><p>font-family字体 (应搭配 @font-face)</p><ul><li>@font-face定义字体 (使用者不需安装字体)</li></ul></li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/**    font-family  字体名称    src      路径    font-stretch     拉伸字体    font-style字体样式    font-weight字体粗细**/</span><span class="token atrule"><span class="token rule">@font-face</span></span><span class="token punctuation">&#123;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> myFirstFont<span class="token punctuation">;</span>    <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'字体档路径'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="text文本样式"><a href="#text文本样式" class="headerlink" title="text文本样式"></a>text文本样式</h4><hr><ul><li><p>text-indent 首行缩排</p></li><li><p>text-align 水平对齐</p><p>—left 置左 (default)</p><p>—center 置中</p><p>—right 置右</p></li><li><p>text-shadow 文字阴影</p><p>—h-shadow v-shadow blur color（说明：水平阴影位置 垂直阴影位置 模糊范围 (值越大越模糊) 阴影颜色）</p></li><li><p>text-transform 字母大小写</p><p>—none 依程式码 (default)</p><p>—uppercase 大写</p><p>—lowercase 小写</p><p>—capitalize 首字大写</p></li><li><p>text-decoration 字元装饰</p><p>—none 不装饰 (default)</p><p>—underline 底线</p><p>—overline 顶线</p><p>—line-through 删除线</p></li><li><p>letter-spacing 字元间距</p></li><li><p>line-height 行高</p></li><li><p>Column 栏样式</p><p>—column-width 以宽度分栏</p><p>—column-count 栏数</p><p>—column-gap 栏间隔</p><p>—column-rule 分栏样式</p><ul><li>width style color （说明：宽度 样式 颜色）</li><li>column-span 横跨分栏</li></ul></li></ul><h4 id="background属性"><a href="#background属性" class="headerlink" title="background属性"></a>background属性</h4><hr><ul><li><p>background-color 背景颜色</p></li><li><p>background-clip 背景范围</p><p>—border-box 框线内含 (default)</p><p>—ontent-box 内容</p><p>—padding-box 内边距内</p></li><li><p>background-image 背景图片</p><p>—url(‘图片路径’)</p></li><li><p>background-size 背景图片大小</p></li><li><p>background-repeat 背景图片重複</p><p>—no-repeat 不重複</p><p>—repeat-x 横向重複</p><p>—repeat-y 纵向重複</p><p>—repeat 横纵向重複 (default)</p></li><li><p>background-position 背景图片位子</p><p>—x, y</p><p>—center</p><p>—top</p><p>—bottom</p><p>—right</p><p>—left</p></li><li><p>background-attachment 固定背景图片</p><p>—fixed 固定 (随著卷轴移动)</p></li><li><p>opacity 透明度</p><p>—0~1 之间的值</p><p>—0 完全透明，1完全不透明</p></li></ul><h4 id="list列表属性"><a href="#list列表属性" class="headerlink" title="list列表属性"></a>list列表属性</h4><hr><ul><li><p>list-style-type 项目标记类型</p></li><li><p>list-style-image 以图片作为项目标记</p></li><li><p>list-style-position 项目标记显示位置</p><p>—inside 内置</p><p>—outside 外置 (default)</p></li><li><p>list-style-type 项目标记类型</p></li></ul><table><thead><tr><th style="text-align:center"><strong>value</strong></th><th style="text-align:center"><strong>description</strong></th><th style="text-align:center">value</th><th style="text-align:center"><strong>description</strong></th></tr></thead><tbody><tr><td style="text-align:center">none</td><td style="text-align:center">无标记</td><td style="text-align:center">lower-roman</td><td style="text-align:center">i.,ii.,iii.,iv.,v…</td></tr><tr><td style="text-align:center">disc</td><td style="text-align:center">实心圆</td><td style="text-align:center">upper-roman</td><td style="text-align:center">I.,II.,III.,IV.,V…</td></tr><tr><td style="text-align:center">circle</td><td style="text-align:center">空心圆</td><td style="text-align:center">lower-alpha</td><td style="text-align:center">a,b,c,d,e…</td></tr><tr><td style="text-align:center">square</td><td style="text-align:center">实心方块</td><td style="text-align:center">upper-alpha</td><td style="text-align:center">A,B,C,D,E…</td></tr><tr><td style="text-align:center">decimal</td><td style="text-align:center">1.,2.,3.,4.,5…</td><td style="text-align:center">lower-greek</td><td style="text-align:center">小写希腊文字</td></tr><tr><td style="text-align:center">decimal-leading-zero</td><td style="text-align:center">01.,02.,03.,04.,05…</td><td style="text-align:center">cjk-ideographic</td><td style="text-align:center">中国式数字</td></tr></tbody></table><h4 id="border-边框属性"><a href="#border-边框属性" class="headerlink" title="border 边框属性"></a>border 边框属性</h4><ul><li><p>border 框线</p><p>widthstylecolor</p></li><li><p>—border-width 宽度</p></li><li><p>—border-style 样式</p></li><li><p>—border-color 颜色</p></li><li><p>border-radius 圆弧角</p></li><li><p>border-style 框线样式</p></li></ul><table><thead><tr><th style="text-align:center"><strong>value</strong></th><th style="text-align:center"><strong>description</strong></th><th style="text-align:center"><strong>value</strong></th><th style="text-align:center"><strong>description</strong></th></tr></thead><tbody><tr><td style="text-align:center">none</td><td style="text-align:center">default</td><td style="text-align:center">groove</td><td style="text-align:center">3D凹槽框线</td></tr><tr><td style="text-align:center">hidden</td><td style="text-align:center">隐藏</td><td style="text-align:center">ridge</td><td style="text-align:center">3D凸槽框线</td></tr><tr><td style="text-align:center">dotted</td><td style="text-align:center">点线</td><td style="text-align:center">inset</td><td style="text-align:center">3D凹槽框线</td></tr><tr><td style="text-align:center">dashed</td><td style="text-align:center">虚线</td><td style="text-align:center">outset</td><td style="text-align:center">3D凸槽框线</td></tr><tr><td style="text-align:center">solid</td><td style="text-align:center">实线</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">双实线</td><td style="text-align:center"></td></tr></tbody></table><ul><li>side</li></ul><p><img src="./css/Side.jpg" style="zoom:50%;" /></p><ul><li><p>多种写法 border side × border attribute</p><ul><li><p>border-top</p><p>​       border-top-width</p><p>​       border-top-style</p><p>​       border-top-color</p></li></ul></li><li><p>border-bottom</p></li><li><p>border-left</p></li><li><p>border-right</p><ul><li>合併定义写法<ul><li>property: value;（全部）</li><li>property: value1, value2;（上下, 左右）</li><li>property: value1, value2, value3;（上, 左右, 下）</li><li>property: value1, value2, value3, value4;（上, 右, 下, 左）</li></ul></li></ul></li></ul><h4 id="border-image图片框线属性"><a href="#border-image图片框线属性" class="headerlink" title="border-image图片框线属性"></a>border-image图片框线属性</h4><ul><li><p>border-image 图片框线</p><p>​        source slice width outset repeat</p></li><li><p>border-image-source图片框线来源</p></li><li><p>border-image-slice向内偏移</p><p>​        将图片分为九宫格拉伸</p><p>​        值不可加单位</p></li><li><p>border-image-width宽度 (图片大小)</p></li><li><p>border-image-outset内容与图片框线距离</p></li><li><p>border-image-repeat图片框线填满</p><p>​        —repeat重複填满</p><p>​        —round铺满</p><p>​        —stretch延展填满</p></li><li><p>需搭配 border使用</p></li></ul><h4 id="Outline外框线属性"><a href="#Outline外框线属性" class="headerlink" title="Outline外框线属性"></a>Outline外框线属性</h4><ul><li>outline-color轮廓颜色</li><li>outline-style轮廓样式 (同框线样式)</li><li>outline-width轮廓宽度</li><li>outline-offset轮廓偏移量 (与框线距离)</li></ul><h4 id="box-shadow元素阴影属性"><a href="#box-shadow元素阴影属性" class="headerlink" title="box-shadow元素阴影属性"></a>box-shadow元素阴影属性</h4><ul><li>h-shadow v-shadow blur spread color inset</li><li>水平阴影位置 垂直阴影位置 模糊范围 阴影尺寸 阴影颜色 内部阴影</li></ul><h4 id="table表格属性"><a href="#table表格属性" class="headerlink" title="table表格属性"></a>table表格属性</h4><ul><li><p>border-collapse 合併成单一边框</p><p>​      —separate 分开边框 (default)</p><p>​      —collapse 合併边框 (忽略 border-spacing)</p></li><li><p>border-spacing 储存格间距</p></li><li><p>caption-side 表格标题位置</p><p>​      —top 上方 (default)</p><p>​      —bottom 下方</p></li><li><p>empty-cells 显示空储存格</p><p>​       —show 显示 (default)</p><p>​       —hide 隐藏</p></li><li><p>table-layout 表格配置</p><p>​       —automatic 依照储存格内容决定宽度 (default)</p><p>​       —fixed 固定每个储存格宽度 (内容超出储存格)</p></li></ul><h4 id="cursor游标样式"><a href="#cursor游标样式" class="headerlink" title="cursor游标样式"></a>cursor游标样式</h4><p><img src="./css/Cursor.jpg" alt=""></p><h4 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h4><ul><li><p>显示（Display）型态</p><p>  每个 element 都有预设的型态，但可透过 display 改变</p><p>  型态会影响 element 在网页版面中占用的空间</p><p>常用型态</p><ul><li>span</li><li>label</li></ul></li><li><p>display: inline-block行内区块</p><p>​     width 和 height 预设根据 element 内容决定</p><p>​     可设定 width, height</p><p>​      常用的 element</p><ul><li>input</li></ul></li><li><p>display: block区块</p><p>width 预设 100%</p><p>height 根据 element 内容决定</p><p>width 预设 100%</p><p>可设定 width, height</p><p>width 预设 100%</p><p>下个元素从下行开始排列</p><p>width 预设 100%</p><p>常用的 element</p><ul><li>p</li><li>div</li><li>h1~h6</li></ul></li><li><p>display: none隐藏</p><p>不显示该元素，也不占用版面空间</p></li><li><p>visibility是否可见</p><p>visible</p><p>hidden</p></li><li><p>overflow卷轴</p><p>auto自动卷轴，超出大小才显示卷轴 (default)</p><p>scroll不论内容皆显示卷轴</p><p>hidden隐藏卷轴截掉内容</p><p>visible显示内容</p></li><li><p>resize允许使用者调整元素大小</p><p>  none不允许调整 (default)</p><p>  both允许调整宽度、高度</p><p>  horizontal允许调整宽度</p><p>  vertical允许调整高度</p><p>  通常搭配 overflow: auto使用</p></li></ul><h4 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h4><ul><li><p>position位置</p><ul><li><p>static原本位置 (default)</p></li><li><p>relative相对位置 (相对原位置)</p><p>相对于自我本身位置</p><p>保留原本位置，会覆盖到其他节点</p><p>top v.s. bottom</p><p>​        top 优先</p><p>left v.s. right</p><p>​       left 优先</p></li></ul></li></ul><p><img src="./css/Relative01.jpg" alt=""></p><p><img src="./css/Relative02.jpg" alt=""></p><ul><li><p>absolute绝对位置</p><p>不保留原本位置</p><p>相对于最近已定位的祖先节点</p><p><img src="./css/Absolute.jpg" alt=""></p></li><li><p>fixed固定位置</p><p>不保留原本位置</p><p>相对于网页框架</p></li></ul><p><img src="./css/Fixed.jpg" alt=""></p><ul><li><p>z-index 图层索引</p><ul><li><p>值越大越上面</p></li><li><p>值相同时，依节点顺序排列 (越后面的节点越上面)</p></li><li><p>通常搭配</p><p>position: absolute</p><p>position: fixed</p></li></ul></li><li><p>sticky 黏贴</p><ul><li>relative和fixed的结合</li><li>在目标屏幕可见时像 relative，滚到超出目标时像fixed</li><li>当页面滚动至物件位置时，会固定并停留在顶部</li><li>Google Chrome version 64 开始支援</li></ul></li></ul><h4 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h4><ul><li><p>Float浮动:改变原本版面位置，根据浮动边界决定位置。</p></li><li><p>浮动后，元素型态会变成 inline-block</p></li><li><p>left 向上向左堆叠</p></li><li><p>right 向上向右堆叠</p></li><li><p>clear 清除浮动</p><p>left 清除左边浮动</p><p>right 清除右边浮动</p><p>both 清除两者浮动</p></li></ul><h4 id="Elements-align"><a href="#Elements-align" class="headerlink" title="Elements align"></a>Elements align</h4><ul><li><p>margin 水平置中对齐</p><p>——auto</p></li><li><p>vertical-align 垂直对齐 (元素)</p><p>——top</p><p>——middle</p><p>——bottom</p></li></ul><h4 id="Transform"><a href="#Transform" class="headerlink" title="Transform"></a>Transform</h4><p>transform：变形，用于改变 element 的形状。</p><p>类型</p><ul><li>偏移 (translate)</li><li>旋转 (rotate)</li><li>缩放 (scale)</li><li>扭转 (skew)</li></ul><h4 id="Transform-2D"><a href="#Transform-2D" class="headerlink" title="Transform 2D"></a>Transform 2D</h4><ul><li><p>transform: translate(x, y) 偏移</p><p>—x: X 轴偏移量，可为百分比</p><p>—y: Y 轴偏移量，可为百分比</p></li><li><p>transform: rotate(ndeg) 旋转</p><p>—预设以元素中心为旋转中心点</p><p>—正数值为顺时钟旋转</p><p>—负数值为逆时钟旋转</p><p>—需加 deg 单位</p></li><li><p>transform-origin: x y 旋转中心点</p><p>—x: X 轴偏移量，可为百分比、left、center、right</p><p>—y: Y 轴偏移量，可为百分比、top、center、bottom</p></li><li><p>transform: scale(w-rate, h-rate) 缩放</p><p>—w-rate: 宽度缩放倍率</p><p>—h-rate: 高度缩放倍率</p></li><li><p>transform: skew(xdeg, ydeg) 扭转</p><p>—x: 沿著 x 轴扭转</p><p>—y: 沿著 y 轴扭转</p><p>—需加 deg 单位</p></li><li><p>transform: skewX(xdeg) 沿著 x 轴扭转</p></li><li><p>transform: skewY(ydeg) 沿著 y 轴扭转</p></li></ul><h4 id="Transform-3D"><a href="#Transform-3D" class="headerlink" title="Transform 3D"></a>Transform 3D</h4><ul><li><p>perspective 视角 (远近)</p></li><li><p>perspective-origin 视角位置</p></li><li><p>transform: translate(x, y) 偏移</p><ul><li><p>transform: translateX(x) x 轴偏移</p></li><li><p>transform: translateY(y) y 轴偏移</p></li><li><p>transform: translateZ(z) z 轴偏移</p><p>—x, y, z: 0 或 1（0 表不沿著该轴旋转, 1 表沿著该轴旋转）</p><p>—a: 旋转角度</p></li></ul></li><li><p>transform: scale(w-rate, h-rate) 缩放</p><ul><li><p>transform: scaleX(rate) 沿著 x 轴缩放 (胖瘦)</p></li><li><p>transform: scaleY(rate) 沿著 y 轴缩放 (高矮)</p></li><li><p>transform: scaleZ(rate) 沿著 z 轴缩放</p><p>—须搭配其他变形</p></li><li><p>transform: scale3d(x, y, z)</p></li></ul></li></ul><h4 id="Transition"><a href="#Transition" class="headerlink" title="Transition"></a>Transition</h4><p>转场动画 (Transition)，由系统自动产生从样式 A 到样式 B 的渐变动画，单纯透过 CSS 製造转场动画。</p><ul><li><p>transition-property 属性名称</p><p>—all (default)</p></li><li><p>transition-duration 效果持续时间 (单位 s, ms)</p><p>—0s (default，不会有效果)</p></li><li><p>transition-timing-function 加速度曲线</p></li><li><p>transition-delay 延迟播放 (单位 s, ms)</p></li><li><p>transition-timing-function 加速度曲线</p><p>—linear 均速</p><p>—ease 先加速后减速 (default)</p></li></ul><p>​       —ease -in 加速<br>      —ease -out 减速<br>​      —ease -in-out 平缓的先加速后减速</p><h4 id="Animation"><a href="#Animation" class="headerlink" title="Animation"></a>Animation</h4><p>自订动画 (Animation)，由开发者自定义的动画，包含动画定义和动画使用。</p><ul><li><p>@keyframes 动画定义</p><p>——from and to</p><p>——进度百分比</p></li><li><p>animation 动画</p></li><li><p>animation-name 动画名称</p></li><li><p>animation-duration 动画持续时间 (单位 s, ms)</p></li><li><p>animation-timing-function 加速度曲线</p><p>—linear 均速</p><p>—ease 先加速后减速 (default)</p><p>—ease -in 加速</p><p>—ease -out 减速</p><p>—ease -in-out 平缓的先加速后减速</p></li><li><p>animation-delay 延迟播放</p></li><li><p>animation-iteration-count 播放次数 (infinite: 无限循环)</p></li><li><p>animation-direction 播放方向</p><p>—normal 0% ~ 100% (default)</p><p>—reverse 100% ~ 0%</p><p>—alternate 0% ~ 100%，100% ~ 0%</p><p>—alternate-reverse 100% ~ 0%，0% ~ 100%</p></li><li><p>animation-fill-mode 播放前后的状态</p><p>—none 回到未播放动画效果前 (default)</p><p>—forwards 停在最后一个状态上</p><p>—backwards 停在第一个状态上</p><p>—both 视 animation-direction</p><p>—animation-play-state 播放或暂停</p><p>—running 播放 (default)</p><p>—paused 暂停</p></li></ul><h3 id="常用单位"><a href="#常用单位" class="headerlink" title="常用单位"></a>常用单位</h3><ul><li><p>常用绝对单位</p><ul><li>px</li><li>pt</li></ul></li><li><p>常用相对单位</p><ul><li>% (以父节点为基准的百分比)</li><li>em (预设 16px)</li><li>rem (root em，预设 16px)</li></ul><p>注：em 和 rem</p><ul><li>em = 父节点大小 * em倍数</li><li>rem = 根节点大小 * rem倍数</li></ul></li></ul><p>​      </p><h3 id="Web-UI-设计哲学"><a href="#Web-UI-设计哲学" class="headerlink" title="Web UI 设计哲学"></a>Web UI 设计哲学</h3><p>介面容器，为了因应不同使用者的萤幕大小，确保版面不会因解析度不同而跑版，便于开发者开发，要素包括</p><ul><li>容器本身使用绝对单位的宽度 (px</li><li>水平置中对齐</li><li>容器内部的元素使用相对单位 (%, rem)</li></ul><p>最好的设计是没有卷轴，过多的卷轴会造成使用者操作上的困扰，第二好的设计是只有垂直卷轴，应避免横向卷轴。</p><h3 id="RWD-基础"><a href="#RWD-基础" class="headerlink" title="RWD 基础"></a>RWD 基础</h3><h4 id="响应式网页设计"><a href="#响应式网页设计" class="headerlink" title="响应式网页设计"></a>响应式网页设计</h4><p>响应式网页设计 (Responsive Web Design)，网页的设计可以自动适应不同访问设备(电脑, 平板, 手机)，单纯透过 CSS Media Query 控制，不须维护第二套程式码，强调使用相对单位 (%, rem, em)和流动、弹性的设计 (inline-block, float…)。</p><ul><li><p>mata - viewport 可视区域</p><p>user-scalable=no 取消移动装置的缩放功能</p></li></ul><h4 id="Media-Queries-与介面容器"><a href="#Media-Queries-与介面容器" class="headerlink" title="Media Queries 与介面容器"></a>Media Queries 与介面容器</h4><p>为了让不同使用者的萤幕解析度可以获得最佳浏览效果，根据萤幕解析度，制定不同大小的介面容器，增加使用者体验。</p><ul><li>常见的介面容器宽度</li></ul><table><thead><tr><th></th><th style="text-align:center"><strong>超小萤幕设备</strong></th><th style="text-align:center"><strong>小萤幕设备</strong></th><th style="text-align:center"><strong>中萤幕设备</strong></th><th style="text-align:center"><strong>大萤幕设备</strong></th></tr></thead><tbody><tr><td>Media Queries</td><td style="text-align:center">&lt;768px</td><td style="text-align:center">>=768px</td><td style="text-align:center">>=992px</td><td style="text-align:center">>=1200px</td></tr><tr><td>容器宽度</td><td style="text-align:center">100%</td><td style="text-align:center">750px</td><td style="text-align:center">970px</td><td style="text-align:center">1170px</td></tr></tbody></table><ul><li><p>流动配置 (Fluid Layout)</p><p>—根据父节点大小自动排版的样式</p><p>—相对单位（em, rem，%）</p><p>—常用的流动样式（display: inline-block，float）</p></li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="Inherit"><a href="#Inherit" class="headerlink" title="Inherit"></a>Inherit</h4><ul><li>父节点部分样式会被子节点继承、部分样式不会</li><li>会被继承的样式<ul><li>font-size</li><li>text-align</li></ul></li><li>不会被继承的样式<ul><li>background</li><li>position</li></ul></li></ul><h4 id="常用-Function"><a href="#常用-Function" class="headerlink" title="常用 Function"></a>常用 Function</h4><ul><li><p>!important 避免样式被覆盖</p></li><li><p>:not() 非</p><p>— :not(:first-child) 不是第一个子节点的</p></li><li><p>calc() 不同单位计算</p><p>— left: calc(100% - 200px) 100%-200px</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CSS（Cascading Style Sheets）：层迭样式表，定义如何显示&lt;a href=&quot;https://10.151.110.165/wiki/index.php/HTML&quot;&gt;HTML&lt;/a&gt;元素，样式通常存储在样式表中，解决内容与表现分离的问题，多个样式定义可层
      
    
    </summary>
    
    
      <category term="技术分享" scheme="http://example.com/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript</title>
    <link href="http://example.com/2021/04/17/JavaScript/"/>
    <id>http://example.com/2021/04/17/JavaScript/</id>
    <published>2021-04-17T11:37:41.000Z</published>
    <updated>2021-04-18T07:38:28.330Z</updated>
    
    <content type="html"><![CDATA[<ol><li>JavaScript</li></ol><ul><li>高阶程式语言</li><li>直译式程式语言 (脚本式程式语言)</li><li>动态型别程式语言 (Dynamic typed language)</li><li>在 Browser 中执行的程式语言</li><li>用来控制 HTML 中的 Elements</li><li>大小写视为不同字元</li></ul><ol start="2"><li>JavaScript ≠ Java</li></ol><table><thead><tr><th></th><th><strong>JavaScript</strong></th><th><strong>Java</strong></th></tr></thead><tbody><tr><td>类型</td><td>直译式程式语言</td><td>编译式程式语言</td></tr><tr><td>应用范围</td><td>Web</td><td>Client-Server, Mobile, Web</td></tr></tbody></table><ol start="3"><li><p>使用方法</p><ul><li>引用 JavaScript 档案</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"JavaScript档案路径"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用 HTML 标籤</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>例：</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>html<span class="token operator">></span>　<span class="token operator">&lt;</span>head<span class="token operator">></span>     <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"JavaScript档案路径"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>     <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token comment">/* JavaScript 定义区 */</span>     <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>　<span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>  <span class="token operator">&lt;</span>body<span class="token operator">></span>      <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>script<span class="token operator">></span>          <span class="token comment">/* JavaScript 定义区 */</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>开发人员常用 debug 工具</p><ul><li>搭配开发人员工具</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>中断执行</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>执行结果受摆放位置影响</p><ul><li>直译式程式语言</li><li>读到哪，执行到哪</li><li>位置影响执行结果</li></ul></li><li><p>命名规则</p><ul><li>驼峰型</li><li>变数/函数首字小写，以大小写区隔不同单字</li><li>范例<ul><li><strong>t</strong>imer</li><li><strong>l</strong>ogin<strong>F</strong>orm</li><li><strong>g</strong>et<strong>E</strong>lement</li><li><strong>s</strong>et<strong>T</strong>itle</li></ul></li></ul></li></ol><h4 id="变数-Variable"><a href="#变数-Variable" class="headerlink" title="变数(Variable)"></a>变数(Variable)</h4><ol><li><p>变数宣告</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> variable<span class="token punctuation">;</span><span class="token keyword">var</span> variable <span class="token operator">=</span> value<span class="token punctuation">;</span><span class="token keyword">var</span> variable1<span class="token punctuation">,</span> variable2<span class="token punctuation">,</span> variable3<span class="token punctuation">;</span><span class="token keyword">var</span> variable1 <span class="token operator">=</span> value1<span class="token punctuation">,</span> variable2 <span class="token operator">=</span> value2<span class="token punctuation">,</span> variable3 <span class="token operator">=</span> value3<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>开发规则<ul><li>变数的名称命名，应根据值的内容为有意义的名词。</li><li>JS中应明确宣告每个变数。</li></ul></li></ul></li><li><p>动态型态语言 (Dynamic typed language)</p><ul><li>不需事先宣告资料型态</li><li>根据变数内的值决定变数型态</li></ul></li><li><p>资料型态</p><ul><li><p>简单</p><ul><li>未定义 (Undefined, default)</li><li>空值 (Null)</li></ul></li><li><p>基本</p><ul><li>布林 (Boolean)</li><li>数值 (Number)</li><li>字串 (String)</li></ul></li><li><p>复合</p><ul><li>阵列 (Array)</li><li>物件 (Object)</li></ul></li><li><p>特殊</p><ul><li><p>函数 (Function)</p><ol><li>查询资料型态</li></ol><ul><li>typeof(variable)</li></ul></li></ul></li></ul></li><li><p>布林 (Boolean)</p><ul><li>值<ul><li>true</li><li>false</li></ul></li><li>函数 (function)<ul><li>Boolean(variable) 强制转为布林型态</li></ul></li><li>方法 (method)<ul><li>variable.toString() 转为字串型态</li></ul></li></ul></li><li><p>数值</p><ul><li>NaN (Not a Number)<ul><li>运算错误<ul><li>无法转成数值的运算、除以0</li></ul></li></ul></li><li>近似值<ul><li>浮点数中的整数可能只是近似值</li></ul></li><li>函数 (function)<ul><li>isNaN(variable)判断是否为 NaN</li><li>Number(variable)强制转为数值型态</li><li>parseInt(variable)强制转整数</li><li>parseFloat(variable)强制转浮点数<ol><li>方法 (method)</li></ol></li><li>variable.toFixed(n)取小数到第 n 位</li><li>variable.toString()转换为字串</li></ul></li></ul></li><li><p>字串 (String)</p><ul><li>单双引号</li><li>字串连接: +</li><li>函数 (function)<ul><li>String(variable)强制转为字串</li></ul></li><li>属性 (attribute)<ul><li>variable.length字串长度</li></ul></li><li>方法 (method)<ul><li>variable.charAt(n)取得第 n 个字元 (从 0 开始)</li></ul></li></ul></li><li><p>阵列 (Array)</p><ul><li>宣告</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> variableArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>variableArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> value0<span class="token punctuation">;</span>variableArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> value1<span class="token punctuation">;</span>variableArray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> value2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> variableArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>value0<span class="token punctuation">,</span> value1<span class="token punctuation">,</span> value2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> variableArray <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>variableArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> value0 <span class="token punctuation">;</span>variableArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> value1 <span class="token punctuation">;</span>variableArray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> value2 <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> variableArray <span class="token operator">=</span> <span class="token punctuation">[</span>value0<span class="token punctuation">,</span> value1<span class="token punctuation">,</span> value2<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><ul><li>值可为任意型态</li><li>属性 (attribute)<ul><li>variableArray.length取得阵列长度</li></ul></li></ul><ol start="8"><li>物件 (Object)</li></ol><ul><li><p>属性 (attribute)</p><ul><li>属性值可为任意型态</li></ul></li><li><p>方法 (method)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> variableObject <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">'attribute1 '</span><span class="token operator">:</span> value1<span class="token punctuation">,</span> <span class="token string">'attribute2 '</span><span class="token operator">:</span> value2<span class="token punctuation">,</span> <span class="token string">'method1 '</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token comment">//do something</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>variableObject<span class="token punctuation">.</span>attribute3 <span class="token operator">=</span> value3 <span class="token punctuation">;</span><span class="token comment">//指定属性值</span>variableObject<span class="token punctuation">.</span>attribute1 <span class="token punctuation">;</span><span class="token comment">//取属性值</span>variableObject<span class="token punctuation">.</span><span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="9"><li><p>函数 (Function)</p><ul><li>也称为函式，皆指 Function</li><li>函数内的变数生命週期只在函数执行期间</li><li>目的<ul><li>不立即执行，等呼叫时才执行</li><li>重复使用</li></ul></li><li>类型<ul><li>具名函数<ul><li>定义时，即给予函数名称</li></ul></li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">name</span> <span class="token punctuation">(</span><span class="token parameter">argument1<span class="token punctuation">,</span> argument2<span class="token punctuation">,</span> …<span class="token punctuation">,</span> argumentN</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//do something</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><ul><li><p>匿名函数</p><ul><li>定义时，没有给予函数名称，而是使用变数储存</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">name</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">argument1<span class="token punctuation">,</span> argument2<span class="token punctuation">,</span> …<span class="token punctuation">,</span> argumentN</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//do something</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>立即函数</p><ul><li>立即执行</li><li>常用于只执行一次的程式码</li><li>变数生命週期只在括号内</li><li>减少全域变数的产生</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">argument1<span class="token punctuation">,</span> argument2<span class="token punctuation">,</span> …<span class="token punctuation">,</span> argumentN</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//do something</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>variable1<span class="token punctuation">,</span> variable2<span class="token punctuation">,</span> …<span class="token punctuation">,</span> variableN<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>开发规则</p><ul><li>函数名称的命名为『动词』+『名词』，应根据函数的执行内容给予有意义的动词+名词。</li><li>函数宣告时需在函数上方加上函数注解，注解应包含函数说明、引数内容 (引数型态、引数英文名称、引数说明)、回传值内容 (回传值型态、回传值说明)</li></ul></li><li>函数注解可加快开发速度、增加程式码的可读性、易于维护</li></ul><h4 id="运算子-Operator"><a href="#运算子-Operator" class="headerlink" title="运算子 (Operator)"></a>运算子 (Operator)</h4><ol><li>算术运算子 (Arithmetic Operator)<ul><li>变数运算<ul><li>- 取反</li><li>a+b a加b</li><li>a-b a减b</li><li>a*b a乘b</li><li>a/b a除以b</li><li>a%b a对b取馀</li><li>++a 先对a+1再返回a</li><li>a++ 先返回a再对a+1</li><li>–a 先对a-1再返回a</li><li>a– 先返回a再对a-1</li></ul></li></ul></li><li>位元运算子 (Bitwise Operator)<ul><li>对整数的位元进行运算<ul><li>a &amp; b 交集 (And)</li><li>a | b 联集 (Or)</li><li>a ^ b 互斥 (Xor)</li><li>~a 补数 (Not)</li><li>a &lt;&lt; b 左移</li><li>a &gt;&gt; b 带正负号右移</li><li>a &gt;&gt;&gt; b 补0右移</li></ul></li></ul></li><li>指派运算子 (Assignment Operator)<ul><li>将右边的运算结果指派给左边<ul><li>a = b a = b</li><li>a += b a = a + b</li><li>a -= b a = a - b</li><li>a <em>= b a = a </em> b</li><li>a /= b a = a / b</li><li>a %= b a = a % b</li></ul></li></ul></li><li>比较运算子 (Comparison Operator)<ul><li>两数比较(返回值为true/false)<ul><li>a == b 相等</li><li>a === b 完全相等</li><li>a != b 不相等</li><li>a !== b 完全不相等</li><li>a &lt; b 小于</li><li>a &lt;= b 小于等于</li><li>a &gt; b 大于</li><li>a &gt;= b 大于等于</li></ul></li></ul></li><li>逻辑运算子 (Logical Operator)<ul><li>返回值为true/false<ul><li>a &amp;&amp; b 且</li><li>a || b 或</li><li>!(a &amp;&amp; b) 非</li><li>!(a || b) 非</li></ul></li></ul></li><li>字串运算子 (String Operator)<ul><li>+ 字串相加</li></ul></li></ol><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><ol><li><p>If-else</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//条件成立时</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//条件成立时</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>   <span class="token comment">//条件不成立时</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li><p>开发规则：if-else 的 { } 严禁省略</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>condition1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//条件1成立时</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>condition2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//条件2成立时</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>   <span class="token comment">//条件皆不成立时</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>开发规则：if-else 的 { } 严禁省略</p></li><li><p>If-else 指派缩写(三元运算符)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> variable <span class="token operator">=</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token operator">?</span> value1 <span class="token operator">:</span> value2 <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>符合条件时 variable = value1</p></li><li><p>不符合条件时 variable = value2</p></li><li><p>原完整写法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> variable<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    variable <span class="token operator">=</span> value1 <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    variable <span class="token operator">=</span> value2 <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="2"><li><p>Switch-case</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">switch</span><span class="token punctuation">(</span>variable<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> value1 <span class="token operator">:</span>        <span class="token comment">//等于 value1 时</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> value2 <span class="token operator">:</span>        <span class="token comment">//等于 value2 时</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> value3 <span class="token operator">:</span>        <span class="token comment">//等于 value3 时</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token comment">//条件皆不成立时</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>For</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"> <span class="token keyword">for</span><span class="token punctuation">(</span>variableStartValue <span class="token punctuation">;</span> condition <span class="token punctuation">;</span> step<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//迴圈内容</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>For-in (for-each)</p><ul><li>不须指定起始值、条件、增减值</li><li>将所有索引值暂存到 tempVariable</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span>tempVariable <span class="token keyword">in</span> variable<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//迴圈内容</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>While</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">while</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//迴圈内容</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>Do-while</p><ul><li>先做一次迴圈内容再进行判断</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">do</span><span class="token punctuation">&#123;</span>    <span class="token comment">//迴圈内容</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>break 强制跳出迴圈</p><ul><li>通常搭配 if 条件使用</li><li>任何迴圈皆可使用</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span>variableStartValue <span class="token punctuation">;</span> condition <span class="token punctuation">;</span> step<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//迴圈内容 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>continue 强制跳至下一次迭代</p><ul><li>通常搭配 if 条件使用</li><li>任何迴圈皆可使用</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span>variableStartValue <span class="token punctuation">;</span> condition <span class="token punctuation">;</span> step<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//迴圈内容 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Try-catch 错误监测</p><ul><li>throw 抛出错误讯息并中断执行</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">try</span><span class="token punctuation">&#123;</span>    <span class="token comment">//错误监测区块</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> errorValue <span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>errorVariable<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//错误发生时的执行内容</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="Document-Object-Model（DOM）"><a href="#Document-Object-Model（DOM）" class="headerlink" title="Document Object Model（DOM）"></a>Document Object Model（DOM）</h3><ol><li>简介<ul><li>将 HTML 中的各标籤 (tag) 转以树状物件的方式呈现</li></ul></li></ol><p><img src="./JS/Dom1.png" style="zoom: 33%;" /></p><ul><li>提供 HTML 文件浏览、处理和维护阶层架构的功能<ul><li>浏览 (Navigator) : 走访各节点</li><li>参考 (Reference) : 存取节点</li></ul></li><li>每个节点都是物件</li></ul><ol start="2"><li><p>取得元素节点的方式</p><ul><li>元素节点 (Element)</li><li>id</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>elementId<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><ul><li><p>节点阵列 (NodeList or HTMLCollection)</p><ul><li><p>tag</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span>tagName<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>name</p><pre class="line-numbers language-none"><code class="language-none">document.getElementsByName(celementName)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>class</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><ol start="3"><li><p>取得元素节点的方式 - HTML5 Selector</p><ul><li>元素节点 (Element)</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>节点阵列 (NodeList or HTMLCollection)</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>HTML5 Selector 与 CSS3 Selector 无太大差异</li></ul></li><li><p>元素转物件</p><ul><li>html</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>className <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>innerHTML<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>JavaScript</p><ul><li>取得 attribute value</li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">element.attribute<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>改变 attribute value</li></ul><pre class="line-numbers language-none"><code class="language-none">element.attribute &#x3D; attributeValue ;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>保留字</p><ul><li>innerHTML 标籤内容</li><li>className class 属性</li></ul></li><li><p>改变 CSS 样式</p><ul><li>改变 style 属性值<ul><li>CSS属性名称有「- 」的，到 JavaScript 要改为大小写模式,例如：font-weight 在 JavaScript 中要改为 fontWeight</li><li>不建议使用</li></ul></li><li>定义 CSS 样式后，改变 class</li></ul></li><li><p>事件 (Event)</p><ul><li>事件为 Element 的其中一个属性 (attribute)</li><li>事件需搭配监听器 (Listener, 即函数 Function) 使用</li><li>保留引数 event</li><li>event<ul><li>event.preventDefault() 取消事件的预设动作</li><li>event.stopPropagation() 停止事件传播</li></ul></li></ul></li><li><p>常用事件</p></li></ol><table><thead><tr><th><strong>Event</strong></th><th><strong>触发时机</strong></th><th><strong>常用于</strong></th></tr></thead><tbody><tr><td>onclick</td><td>当滑鼠点击该 Element 时</td><td>button</td></tr><tr><td>ondbclick</td><td>当滑鼠双击该 Element 时</td><td></td></tr><tr><td>onload</td><td>当该 Element 载入完成时</td><td>body, img</td></tr><tr><td>onchange</td><td>当该 Element 改变时</td><td>select</td></tr><tr><td>onfocus</td><td>当该 Element 获得焦点时</td><td>input</td></tr><tr><td>onblur</td><td>当该 Element 失去焦点时</td><td>input</td></tr><tr><td>onsubmit</td><td>当表单被送出时</td><td>form</td></tr></tbody></table><ol start="9"><li>常用滑鼠事件 (Mouse Event)</li></ol><table><thead><tr><th><strong>Event</strong></th><th><strong>触发时机</strong></th></tr></thead><tbody><tr><td>onmouseover</td><td>当滑鼠进入该 Element 时</td></tr><tr><td>onmouseout</td><td>当滑鼠离开该 Element 时</td></tr><tr><td>onmousedown</td><td>当滑鼠在该 Element 按下时</td></tr><tr><td>onmouseup</td><td>当滑鼠在该 Element 弹起时</td></tr><tr><td>onmousemove</td><td>当滑鼠在该 Element 移动时</td></tr></tbody></table><ol start="10"><li>常用键盘事件 (Keyborad Event)</li></ol><table><thead><tr><th><strong>Event</strong></th><th><strong>触发时机</strong></th></tr></thead><tbody><tr><td>onkeydown</td><td>当键盘在该 Element 按下时</td></tr><tr><td>onkeypress</td><td>当键盘在该 Element 按下时</td></tr><tr><td>onkeyup</td><td>当键盘在该 Element 弹起时</td></tr></tbody></table><ol start="11"><li>拖曳事件 (Drag &amp; Drop Event, HTML5)</li></ol><table><thead><tr><th><strong>Event</strong></th><th><strong>触发时机</strong></th></tr></thead><tbody><tr><td>ontouchstart</td><td>当该 Element 被触摸时</td></tr><tr><td>ontouchmove</td><td>当该 Element 被拖曳时</td></tr><tr><td>ontouchend</td><td>当该 Element 结束触摸时</td></tr><tr><td>ontouchcancel</td><td>当触摸由系统取消时</td></tr></tbody></table><h3 id="动态操作"><a href="#动态操作" class="headerlink" title="动态操作"></a>动态操作</h3><ol><li><p>动态与静态的区别</p><ul><li>静态操作<ul><li>Element 建立在 HTML 档案中</li></ul></li><li>动态操作<ul><li>透过 JavaScript 操作 Element (新增、修改、删除)</li></ul></li></ul></li><li><p>建立 Element</p><ol><li>建立 Element</li><li>把新建立的 Element 加入到某个节点</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> newElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>tagName<span class="token punctuation">)</span><span class="token punctuation">;</span>parentElement<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newElement<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>删除 Element</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">parentElement<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>newElement<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>增加事件监听器</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>eventType<span class="token punctuation">,</span> listener<span class="token punctuation">,</span> useCapture<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>eventType: 事件类型</li><li>listener: 监听器</li><li>useCapture: 事件执行顺序<ul><li>true: 由父节点到子节点</li><li>false: 由子节点到父节点 (default)</li></ul></li><li>增加事件 ≠ 覆盖</li></ul></li><li><p>节点相关属性 (Attribute)</p><ul><li>element.firstChild 第一个子节点</li><li>element.lastChild 最后一个子节点</li><li>element.childNodes 所有的子节点</li><li>element.parentNode 父节点</li><li>element.previousSibling 上一个相邻节点</li><li>element.nextSibling 下一个相邻节点</li><li>element.nodeName 节点标籤名称</li></ul></li><li><p>节点相关方法 (Method)</p><ul><li>document.createElement(tagName) 建立HTML节点</li><li>element.appendChild(newElement) 增加子节点</li><li>element.insertBefore(newChild, refChild) 插入子节点</li><li>element.removeChild(child) 删除子节点</li><li>element.cloneNode(true) 複製节点<ul><li>true 複製子节点</li><li>false(default) 不複製子节点</li></ul></li><li>element.getAttribute(attribute) 取得属性值</li><li>element.setAttribute(attribute, value) 设定属性值</li></ul></li></ol><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><ol><li><p>讯息框</p><ul><li>alert(message) 提示讯息框</li><li>confirm(message) 确认讯息框</li><li>prompt(message, defaultValue) 输入讯息框</li><li>中断 JavaScript 的执行，对使用者会造成不良的使用体验</li></ul></li><li><p>计时器</p><ul><li>setInterval(function, delay 循环执行执行 (无限多次)</li><li>clearInterval(intervalID) 清除循环计时器</li><li>setTimeout(function, delay) 时间到后执行 (仅一次)</li><li>clearTimeout(timeoutID) 清除时间到后执行</li></ul></li><li><p>Cookie</p><ul><li>暂存在 Client 的资料</li><li>资料量限制 4 KB</li><li>每个 HTTP Request 送出时都会把 Cookie 送到 Server</li><li>拖慢执行的效能与浪费不必要的网路频宽</li></ul></li><li><p>Storage</p><ul><li><p>暂存在 Client 的资料</p></li><li><p>资料量大</p></li><li><p>类型</p><ul><li><p>Local Storage</p><ul><li>透过 JavaScript 清空</li><li>使用者手动清除 Browser</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span>localStorage<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>Session Storage<ul><li>Browser 或 tab 关闭时清空</li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span>sessionStorage<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul></li></ol><h3 id="JavaScript-Library"><a href="#JavaScript-Library" class="headerlink" title="JavaScript Library"></a>JavaScript Library</h3><ol><li>简介<ul><li>基于 JavaScript 开发，提供开发者快速开发的框架</li><li>特色<ul><li>简化 JavaScript 开发 (Easy-to-use)</li><li>浏览器整合 (Cross-Browser)</li></ul></li><li>常见<ol><li>JQuery</li><li>Dojo</li><li>Ext.js</li><li>…</li></ol></li></ul></li><li>jQuery<ul><li>理念：write less, do more</li><li>全世界 65% 的网页使用，是目前最受欢迎的 Library (维基百科，2017)</li><li>Feature-rich<ul><li>DOM 操作 (document traversal and manipulation)</li><li>事件处理 (event handling)</li><li>动画效果 (animation)</li><li>Ajax</li><li>易用的API (easy-to-use API)</li></ul></li><li>官网：<a href="https://jquery.com/">https://jquery.com/</a></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;高阶程式语言&lt;/li&gt;
&lt;li&gt;直译式程式语言 (脚本式程式语言)&lt;/li&gt;
&lt;li&gt;动态型别程式语言 (Dynamic typed language)&lt;/li&gt;
&lt;li&gt;在 Browser 中执行的
      
    
    </summary>
    
    
      <category term="技术分享" scheme="http://example.com/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>RESTful</title>
    <link href="http://example.com/2021/04/11/RESTful/"/>
    <id>http://example.com/2021/04/11/RESTful/</id>
    <published>2021-04-11T01:34:19.000Z</published>
    <updated>2021-04-17T11:53:17.931Z</updated>
    
    <content type="html"><![CDATA[<p>RESTful 是一种系统开发设计风格、原则。可视情况调整，以下参考来源 RFC5789 (<a href="https://tools.ietf.org/html/rfc5789">https://tools.ietf.org/html/rfc5789</a>)</p><hr><h3 id="Noun"><a href="#Noun" class="headerlink" title="Noun"></a>Noun</h3><ul><li>一般资源</li></ul><p>​          通用于一律使用複数名词</p><p>​                  例如：/books 或 /books/123。但有部分人认为应该使用单数名词，因为： /book/123 看似比 /books/123 合理。但想想档案系统的目录命名 (例如/Users或/Documents)，其实用複数也没问题。複数可以保持API endpoint的一致性，所以一般资源建议用複数。</p><ul><li>唯一资源：对 client 而言只有一份的资源</li></ul><p>​              通用于单数名词</p><p>​                      例如：user 是指目前验证的使用者，使用者永远只能同时登入一个使用者</p><h3 id="Http-Method"><a href="#Http-Method" class="headerlink" title="Http Method"></a>Http Method</h3><table>    <tr align="center">        <th>Method</th>        <th>Idempotent</th>        <th>Safe</th>        <th>CRUD</th>        <th>OO</th>        <th>生活动词</th>        <th>用途</th>    </tr>    <tr>        <td rowspan='2'>GET</td>        <td rowspan='2'>Y</td>        <td rowspan='2'>Y</td>        <td rowspan='2'>Read</td>        <td rowspan='2'>get</td>        <td>get</td>        <td>取得资料</td>    </tr>    <tr>       <td>list</td>       <td>列出资料</td>    </tr>    <tr>        <td rowspan='2'>POST</td>        <td rowspan='2'></td>        <td rowspan='2'></td>        <td rowspan='2'>Create</td>        <td rowspan='2'>add</td>        <td>create</td>        <td>建立一个可以完全独立存在的实体</td>    </tr>    <tr>        <td>add</td>        <td>增加一个必须依赖于某个实体的实体</td>    </tr>    <tr>        <td rowspan='2'>PUT</td>        <td rowspan='2'>Y</td>        <td rowspan='2'></td>        <td rowspan='3'>Update</td>        <td rowspan='3'>set</td>        <td>replace</td>        <td>取代一个关係，已存在时先删除后建立，不存在时直接建立</td>    </tr>    <tr>        <td>add</td>        <td>附加唯一关係，两个关係实体可以互相独立存在，且已经存在</td>    </tr>    <tr>        <td>PATCH</td>        <td></td>        <td></td>        <td>edit</td>        <td>编辑某个实体</td>    </tr>    <tr>        <td>DELETE</td>        <td></td>        <td></td>        <td>Delete</td>        <td>remove</td>        <td>remove delete</td>        <td>删除某个实体</td>    </tr>    </table><ul><li>Safe：该操作不会改变伺服器端的资源状态 (而且结果可以被cache)，属于 Safe 的操作必定属于 Idempotent</li><li>Idempotent (幂等性)：该操作不管做1遍或做n遍，都会得到同样的资源状态结果 (但不一定得到同样的回传值，例如第2次DELETE请求可能回传404)，因此client端可以放心retry</li></ul><h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h3><ul><li>SAFE：每次执行操作时，GET 只有读取 Resource，不会改变到任何的 Resource (资源, 资料)</li><li>Idempotent：每次执行操作时，GET 只有读取 Resource，不会改变到任何的 Resource (资源, 资料)，所以任何资源的任何状态都是一样的</li></ul><h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><ul><li><p>每次执行操作时，POST 都会建立一个 Resource (资源, 资料)</p><ul><li>范例：建立使用者<ul><li>执行第一次时：建立一个 name = “帅小庆” 的 user，但其 id = 1</li><li>执行第二次时：建立一个 name = “帅小庆” 的 user，但其 id = 2，发送同样的请求，可每次都是不同的 Resource</li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token constant">POST</span> <span class="token operator">/</span>usersData<span class="token operator">:</span>  <span class="token punctuation">&#123;</span>    <span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"帅小庆"</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Create：建立一个可以完全独立存在的实体</p><ul><li><p>范例：建立使用者</p><p>​        建立使用者前不需要建立任何的东西，就可以建立使用者了，使用者是可以完全独立的存在</p></li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token constant">POST</span> <span class="token operator">/</span>usersData<span class="token operator">:</span>  <span class="token punctuation">&#123;</span>    <span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"帅小庆"</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>Add：增加一个<strong>必须</strong>依赖于某个实体的实体</p><p>​       资料结构：1对多的关係</p></li><li><p>范例：Add a public key on behalf of a user 增加一个代表使用者的公钥 (Gitea API)</p><p>​        增加这个公钥之前，使用者必须存在，公钥必须归属于某个使用者之下</p><p>​        公钥跟姓名一样，使用相同电脑的公钥就会相同，但不表示是同一个使用者，故公钥也会有自己的 ID</p><p>​        我每次增加公钥时，都将生成不同的公钥 ID</p><pre class="line-numbers language-none"><code class="language-none">POST&#x2F;admin&#x2F;users&#x2F;&#123;username&#125;&#x2F;keys<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h3><ul><li><p>Idempotent：每次执行操作时，PUT 都会取代 Resource，不管操作几次，使用者获取得 Resource 结果都是一样的</p></li><li><p>Replace：不论资源如何，最终的资源状态都是一样的</p><p>​     Resource 已存在时，或许不理会、或许先删除后建立 (取代)</p><p>​     Resource 不存在时，直接建立</p></li><li><p>Add：添加唯一关係，建立这个唯一关係前，两个关连实体都必须存在。在没有建立关係前，两个关连实体都可以互相独立存在</p></li><li><p>资料结构应为：多对多，且两个关连实体的 PK，同时也是关係实体的 PK、FK</p></li><li><p>范例：增加使用者与角色的关係</p><p>​        增加使用者跟角色的关係前，使用者跟角色都必须存在；增加使用者跟角色的关係前，使用者跟角色可以独立存在</p><p>​        使用者 23240，跟角色 2，的关係最多只能有一条关係 (使用者 23240 有角色 2 )，最少没有关係 (使用者 23240 没有角色 2 )</p><p>​        执行第二次操作时，使用者 23240 跟角色 2 的从属关係仍然存在，也不会跑出第二条使用者 23240 跟角色 2 的从属关係</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token constant">PUT</span> user<span class="token operator">/</span><span class="token punctuation">&#123;</span>account<span class="token punctuation">&#125;</span><span class="token operator">/</span>rolesData  <span class="token punctuation">&#123;</span>    <span class="token string">"role_id"</span><span class="token operator">:</span> <span class="token string">"2"</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>范例：Follow a user 关注一个使用者 (Gitea)</p><p>​       增加关注关係时，关注者与被关注者 (都是使用者) 都必须存在；增加关注关係时，关注者与被关注者 (都是使用者) 都必须存在</p><p>​      关注者使用者 23240，跟被关注者使用者 F3860056，的关係最多只能有一条关係 (23240 关注 F3860056)，最少没有关係        (23240 不关注 F3860056)</p><p>​      执行第二次操作时，关注者 23240 跟被关注者 F3860056 的关注关係仍然存在，也不会跑出第二条关注者 23240 跟被关注者 F3860056 的关注关係</p><pre class="line-numbers language-none"><code class="language-none">PUT&#x2F;user&#x2F;following&#x2F;&#123;username&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="PATCH"><a href="#PATCH" class="headerlink" title="PATCH"></a>PATCH</h3><ul><li><p>Edit：编辑可独立存在、且已经存在的实体，也就是产生新版本的实体，可能会影响其他 Resource</p></li><li><p>范例：编辑使用者</p><p>​      编辑使用者，使用者已经存在，且我们可能有纪录编辑时间、编辑人、编辑IP，所以每次的编辑都会造成不一样的结果</p><p>​             第一次编辑使用者，更新时间变为 08:00，编辑人 23240，IP 10.151.110.165</p><p>​             第二次编辑使用者，更新时间变为 09:00，编辑人 23241，IP 10.151.110.144</p><pre class="line-numbers language-none"><code class="language-none">PATCH &#x2F;users&#x2F;&#123;account&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><ul><li><p>Idempotent：每次执行操作时，DELETE 都会删除相同的东西</p></li><li><p>范例：删除使用者</p><p>​         第一次删除使用者23240，删除使用者23240</p><p>​        第二次删除使用者23240，还是删除使用者23240，只不过使用者 23240 不存在了</p><pre class="line-numbers language-none"><code class="language-none">DELETE &#x2F;users&#x2F;&#123;account&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="HTTP-Status-Code"><a href="#HTTP-Status-Code" class="headerlink" title="HTTP Status Code"></a>HTTP Status Code</h3><p>HTTP状态码（HTTP Status Code）是用以表示网页服务器HTTP响应状态的3位数字代码。所有状态码的第一个数字代表了响应的五种状态之一。 除非另有说明，状态码是HTTP / 1.1标准（RFC 7231）的一部分。</p><p>而关于 RESTful API 的请求状态，通常有以下两种设计方案：</p><ul><li>方案一：使用 HTTP 状态码来表示请求状态，200 时返回的内容就是数据；</li><li>方案二：所有接口都返回 200 ，在响应内容里约定 错误码 或 错误信息</li></ul><p>在实际应用中，应据具体情景及需要进行选择与调整。<br><table>    <tr align='center'>       <th>方案</th>        <th colspan='2'>优劣比较</th>    </tr>    <tr>        <td rowspan='2'>方案一</td>        <td>优点</td>        <td>对服务端来说较为简单方便</td>    </tr>    <tr>        <td>缺点</td>        <td>客户端难以根据状态码处理複杂问题</td>    </tr>    <tr>        <td rowspan='2'>方案二</td>        <td>优点</td>        <td>方便对返回资料进行统一处理和细细微性的控制</td>    </tr>    <tr>        <td>缺点</td>        <td>相当于放弃了HTTP状态码的语义</td>    </tr></table></p><h3 id="常用HTTP状态码"><a href="#常用HTTP状态码" class="headerlink" title="常用HTTP状态码"></a>常用HTTP状态码</h3><table><thead><tr><th style="text-align:left"><strong>Code</strong></th><th style="text-align:left"><strong>Message</strong></th><th style="text-align:left"><strong>用途</strong></th></tr></thead><tbody><tr><td style="text-align:left"><strong>1XX</strong></td><td style="text-align:left"><strong>Informational response</strong></td><td style="text-align:left"><strong>此类状态码通常代表的响应都是信息性的，告诉客户端可以进行下一步操作。</strong></td></tr><tr><td style="text-align:left">100</td><td style="text-align:left">Continue</td><td style="text-align:left">表示服务端已接收到请求头，客户端可以继续发送请求体(如POST请求)。</td></tr><tr><td style="text-align:left">101</td><td style="text-align:left">Switching Protocols</td><td style="text-align:left">表示服务端支持更优协议，让客户端在服务端更换协议后重新访问。</td></tr><tr><td style="text-align:left"><strong>2XX</strong></td><td style="text-align:left"><strong>Successful</strong></td><td style="text-align:left"><strong>此类状态码通常代表请求已成功被服务端接收、理解并接受。</strong></td></tr><tr><td style="text-align:left">200</td><td style="text-align:left">OK</td><td style="text-align:left">表示请求成功。</td></tr><tr><td style="text-align:left">201</td><td style="text-align:left">Created</td><td style="text-align:left">表示请求已被实现，通常是在成功创建了某个资源。</td></tr><tr><td style="text-align:left">202</td><td style="text-align:left">Accepted</td><td style="text-align:left">表示请求已被服务端接收，但尚未进行处理。</td></tr><tr><td style="text-align:left">204</td><td style="text-align:left">No Content</td><td style="text-align:left">表示请求成功，但不会返回任何内容。</td></tr><tr><td style="text-align:left">205</td><td style="text-align:left">Reset Content</td><td style="text-align:left">表示请求成功，但不会返回任何内容，并且要求客户端重置表单。</td></tr><tr><td style="text-align:left"><strong>3XX</strong></td><td style="text-align:left"><strong>Redirect</strong></td><td style="text-align:left"><strong>此类状态码通常代表本次请求需要客户端採取进一步操作才能完成。通常用于 重定向。 </strong></td></tr><tr><td style="text-align:left">300</td><td style="text-align:left">Multiple Choices</td><td style="text-align:left">表示请求的资源有多个供可选择，客户端可自行选择一个进行请求的重定向。</td></tr><tr><td style="text-align:left">301</td><td style="text-align:left">Moved Permanently</td><td style="text-align:left">表示请求的资源已经永久地移动到了新位置，并且将在Location域中携带该资源新的URI。</td></tr><tr><td style="text-align:left">304</td><td style="text-align:left">Not Modified</td><td style="text-align:left">表示请求的资源无发生修改，将不会返回任何资源。</td></tr><tr><td style="text-align:left"><strong>4XX</strong></td><td style="text-align:left"><strong>Client Error</strong></td><td style="text-align:left"><strong>此类状态码通常代表客户端可能出现了错误。</strong></td></tr><tr><td style="text-align:left">400</td><td style="text-align:left">Bad Request</td><td style="text-align:left">表示客户端发出的请求有误(格式、大小、无效的…)，服务端不能/不会处理该请求。</td></tr><tr><td style="text-align:left">401</td><td style="text-align:left">Unauthorized</td><td style="text-align:left">表示客户端未能提供必要的验证，服务端拒绝提供资源。</td></tr><tr><td style="text-align:left">403</td><td style="text-align:left">Forbidden</td><td style="text-align:left">表示服务端理解了该请求，但客户端没有足够权限以访问，遂拒绝提供该资源。</td></tr><tr><td style="text-align:left">404</td><td style="text-align:left">Not Found</td><td style="text-align:left">表示服务端无法找到请求的资源，其可能已经暂时(永久)失效。</td></tr><tr><td style="text-align:left">408</td><td style="text-align:left">Request Timeout</td><td style="text-align:left">表示请求超时。</td></tr><tr><td style="text-align:left">409</td><td style="text-align:left">Conflict</td><td style="text-align:left">表示请求的资源发送了衝突，通常是PUT请求。</td></tr><tr><td style="text-align:left">410</td><td style="text-align:left">Gone</td><td style="text-align:left">表示请求的资源已经永久失效，客户端不应再次请求。</td></tr><tr><td style="text-align:left">411</td><td style="text-align:left">Length Required</td><td style="text-align:left">表示服务端拒绝在没有定义Content-Length头的情况下接收该请求。</td></tr><tr><td style="text-align:left"><strong>5XX</strong></td><td style="text-align:left"><strong>Server Error</strong></td><td style="text-align:left"><strong>此类状态码通常代表由于服务端的原因，导致无法完成请求。</strong></td></tr><tr><td style="text-align:left">500</td><td style="text-align:left">Internal Server Error</td><td style="text-align:left">表示由于服务端遇到意料之外的变故，导致无法完成请求。</td></tr><tr><td style="text-align:left">501</td><td style="text-align:left">Not Implemented</td><td style="text-align:left">表示服务端不支持完成请求所需的功能，导致无法完成请求。</td></tr><tr><td style="text-align:left">502</td><td style="text-align:left">Bad Gateway</td><td style="text-align:left">表示作为网関或代理的服务段在执行请求时，从上游服务器获得了无效的响应。</td></tr><tr><td style="text-align:left">503</td><td style="text-align:left">Service Unavailable</td><td style="text-align:left">表示由于某些原因(服务器超载或系统维护等)，导致暂时无法完成请求。</td></tr><tr><td style="text-align:left">504</td><td style="text-align:left">Gatewy Timeout</td><td style="text-align:left">表示作为网関或代理的服务段在执行请求时，未能及时从上游服务器获得响应。</td></tr><tr><td style="text-align:left">505</td><td style="text-align:left">HTTP Version Not  Supported</td><td style="text-align:left">表示服务端不支持请求的HTTP协议版本，导致无法完成请求。</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;RESTful 是一种系统开发设计风格、原则。可视情况调整，以下参考来源 RFC5789 (&lt;a href=&quot;https://tools.ietf.org/html/rfc5789&quot;&gt;https://tools.ietf.org/html/rfc5789&lt;/a&gt;)&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="技术分享" scheme="http://example.com/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>MVC</title>
    <link href="http://example.com/2021/04/11/MVC/"/>
    <id>http://example.com/2021/04/11/MVC/</id>
    <published>2021-04-11T01:30:25.000Z</published>
    <updated>2021-04-18T07:37:41.768Z</updated>
    
    <content type="html"><![CDATA[<p>MVC是一个设计模式，它强制性的使应用程序的输入、处理和输出分开。使用MVC应用程序被分成三个核心部件：模型、视图、控制器。它们各自处理自己的任务。</p><hr><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>MVC（Model–View–Controller）是软件工程中的一种软件架构模式，把软件系统分为三个基本部分：模型（Model）、视图（View）和控制器（Controller）。</li><li>在MVC中，M层处理数据，业务逻辑等；V层处理界面的显示结果；C层起到桥梁的作用，来控制V层和M层通信以此来达到分离视图显示和业务逻辑层。</li></ul><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><ul><li>基本流程</li></ul><ol><li>View接受用户的交互请求(url,ajax)</li><li>View将请求通过路由转交给特定的Controller</li><li>Controller操作Model进行数据请求，Model操作DB进行对应的数据操作（增删改查CRUD）</li><li>Model返回结果，Controller返回数据给View渲染</li><li>View渲染完成后，将数据结果呈现给用户</li></ol><ul><li>图解</li></ul><p><img src=".\img\MVC.png" style="zoom:45%;" /></p><ul><li>总结</li></ul><p>首先控制器接收用户的请求，并决定应该调用哪个模型来进行处理，然后模型用业务逻辑来处理用户的请求并返回数据，最后控制器用相应的视图格式化模型返回的数据，并通过表示层呈现给用户。</p><h3 id="代码实作"><a href="#代码实作" class="headerlink" title="代码实作"></a>代码实作</h3><ul><li>前台View发送请求到Controller</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$t<span class="token punctuation">.</span>ajax<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token comment">/* ① */</span>    <span class="token string">'url'</span><span class="token operator">:</span> <span class="token operator">/</span>users<span class="token punctuation">,</span>   <span class="token string">'success'</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">usersData</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// do something 当后台返回数据后渲染页面呈现给用户 /* ⑦ */</span>   <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Controller</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//users controller</span>Route<span class="token operator">:</span><span class="token operator">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'getUsers'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//路由根据请求匹配对应的Controller与方法，课内在请求时指定了Controller所以只需匹配方法。/* ② */</span>   <span class="token comment">/**   * 查询联系人   * @return object 联系人信息   */</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ③ */</span>    $start <span class="token operator">=</span> Input<span class="token operator">:</span><span class="token operator">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'start'</span><span class="token punctuation">,</span> <span class="token constant">FILTER_SANITIZE_NUMBER_INT</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>                <span class="token string">'default'</span> <span class="token operator">=></span> <span class="token number">0</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    $count <span class="token operator">=</span> Input<span class="token operator">:</span><span class="token operator">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'count'</span><span class="token punctuation">,</span> <span class="token constant">FILTER_SANITIZE_NUMBER_INT</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>                <span class="token string">'default'</span> <span class="token operator">=></span> <span class="token number">15</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    $usersData<span class="token operator">=</span> UserModel<span class="token operator">:</span><span class="token operator">:</span><span class="token function">getUsers</span><span class="token punctuation">(</span>$start<span class="token punctuation">,</span> $count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Controller根据前台参数从Model中获取数据 /* ④ */</span>    $output <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">foreach</span> <span class="token punctuation">(</span><span class="token parameter">$usersData <span class="token keyword">as</span> $user</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      $output<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">array</span><span class="token punctuation">(</span>          <span class="token string">'id'</span> <span class="token operator">=></span> $user<span class="token operator">-</span><span class="token operator">></span>id<span class="token punctuation">,</span>          <span class="token string">'name'</span> <span class="token operator">=></span> $user<span class="token operator">-</span><span class="token operator">></span>name<span class="token punctuation">,</span>          <span class="token string">'tel'</span> <span class="token operator">=></span> $user<span class="token operator">-</span><span class="token operator">></span>tel<span class="token punctuation">,</span>          <span class="token string">'gender'</span> <span class="token operator">=></span> $user<span class="token operator">-</span><span class="token operator">></span>gender<span class="token punctuation">,</span>          <span class="token string">'age'</span> <span class="token operator">=></span> $user<span class="token operator">-</span><span class="token operator">></span>age      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> Output<span class="token operator">:</span><span class="token operator">:</span><span class="token function">json</span><span class="token punctuation">(</span>$output<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* ⑥ */</span> <span class="token comment">//将取得的数据按照约定格式回传给前台 </span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Model</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//Model从DB中进行相应的数据操作，返回数据结果。</span>  <span class="token keyword">static</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token parameter">$start<span class="token punctuation">,</span> $count</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ⑤ */</span>    <span class="token keyword">return</span> self<span class="token operator">:</span><span class="token operator">:</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token operator">-</span><span class="token operator">></span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'tel'</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token operator">-</span><span class="token operator">></span><span class="token function">limit</span><span class="token punctuation">(</span>$start<span class="token punctuation">,</span> $count<span class="token punctuation">)</span>                    <span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>总结</li></ul><p>对照图解，简单总结具体工作流程为：<strong>①→②→③→④→⑤→⑥→⑦</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;MVC是一个设计模式，它强制性的使应用程序的输入、处理和输出分开。使用MVC应用程序被分成三个核心部件：模型、视图、控制器。它们各自处理自己的任务。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概
      
    
    </summary>
    
    
      <category term="技术分享" scheme="http://example.com/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>SoureTree</title>
    <link href="http://example.com/2021/04/11/SoureTree/"/>
    <id>http://example.com/2021/04/11/SoureTree/</id>
    <published>2021-04-11T01:29:29.000Z</published>
    <updated>2021-04-17T11:21:01.655Z</updated>
    
    <content type="html"><![CDATA[<p>SourceTree 是一款提供 GUI 界面来管理版本控制内容的软体，让你可以直接在这款软体内看到每一个 Branch 的线图，从 Commit 到 Branch 的动作，或是在节点上加上 Tag 来方便管理，在 SourceTree 通通做得到。</p><h3 id="常用功能介绍"><a href="#常用功能介绍" class="headerlink" title="常用功能介绍"></a>常用功能介绍</h3><ul><li>Commint:将本地修改过的 档提交到本地库中</li><li>Pull:获取远程库最新版本到本地，并且自动merge</li><li>Push:将本地的最新资讯发送给远程库</li><li>Fretch:获取远程库最新版本到本地，不会自动merge</li><li>Branch:创建一个分支，该分支不会影响主分支</li><li>Merge:从指定的commit合併到当前分支，用来合併两个分支</li><li>可以这样说Pull=Fetch+Merge</li></ul><p><img src=".\img\介绍.png" alt=""></p><h3 id="使用者资讯设置"><a href="#使用者资讯设置" class="headerlink" title="使用者资讯设置"></a>使用者资讯设置</h3><ul><li>每次commit都会用用户名和邮箱记录</li><li>用它来作为你上传到远程库的身份标识</li></ul><p>选择Tools =&gt; Options =&gt; 选择General 按下图所示配置个人信息(远程仓库邮箱信息需保持一致)</p><p><img src=".\img\SourcetreeOptions.png" alt=""></p><h3 id="常用功能演示"><a href="#常用功能演示" class="headerlink" title="常用功能演示"></a>常用功能演示</h3><h4 id="克隆-clone"><a href="#克隆-clone" class="headerlink" title="克隆(clone)"></a>克隆(clone)</h4><p><img src=".\img\Clone.png" alt=""></p><ol><li>此时可以看到本地会出现一个版本库，接著可往该路径放入一个000.html的文件</li></ol><p><img src=".\img\新增文件.png" alt=""></p><h4 id="提交-commit"><a href="#提交-commit" class="headerlink" title="提交(commit)"></a>提交(commit)</h4><ol><li>在本地库放入档后，F5刷新后再单击Stage Selected(暂存所选文件）</li><li>输入提交信息</li><li>点击commit</li></ol><p><img src=".\img\Commit.png" alt=""></p><ul><li>此时可以看到历史选项卡中,在master分支提交了新增,但是这个master分支是本地仓库的,远程仓库现在并没有文件</li></ul><p><img src=".\img\Commit02.png" alt=""></p><h4 id="推送-Push"><a href="#推送-Push" class="headerlink" title="推送(Push)"></a>推送(Push)</h4><ol><li>点击Push(注意：Push前应先Pull拉取最新代码，避免衝突，我这裡因远程仓库是空的就不用)</li><li>勾选本地master分支推送到远程master</li><li>当勾选此选项时将推送所有标籤</li><li>单击Push</li></ol><p><img src=".\img\Push.png" alt=""></p><ul><li>可以看到最新版本里面master和origin/master,这说明本地master分支和远程master分支是同步的</li></ul><p><img src=".\img\同步.png" alt=""></p><ul><li>可以看到远程仓库已经有一次提交记录,且就是刚才我们提交的文件</li></ul><p><img src=".\img\同步02.png" alt=""></p><h4 id="获取-Fetch"><a href="#获取-Fetch" class="headerlink" title="获取(Fetch)"></a>获取(Fetch)</h4><ol><li>我们先编辑刚才提交的文件，在该文件中新增一行</li><li>点击提交更改</li></ol><p><img src=".\img\修改.png" alt=""></p><ul><li>单击Fetch(获取)</li><li>勾选从所有远程获取更新</li><li>点击ok,将从远程仓库中获取更新,但不会合併，也不会使你的本地仓库改变</li></ul><p><img src=".\img\获取02.png" alt=""></p><h4 id="拉取-Pull"><a href="#拉取-Pull" class="headerlink" title="拉取(Pull)"></a>拉取(Pull)</h4><ol><li>这时候会提示远程仓库有一个更新，点击Pull</li><li>单击ok将直接从远程仓库拉取到本地仓库并且自动合併(注意：当确定需要和远程代码合併时可以直接用Pull不需要先Fetch)</li><li>此时可以到历史选项中有一个更新</li></ol><p><img src=".\img\更新.png" alt=""></p><ul><li>远程仓库新增的行已经同步到本地</li></ul><p><img src=".\img\更新2.png" alt=""></p><h4 id="分支创建-Brach"><a href="#分支创建-Brach" class="headerlink" title="分支创建(Brach)"></a>分支创建(Brach)</h4><ul><li>点击Branch按钮，输入新分支的名称</li><li>点击Create Brach创建一个新的分支进行开发</li></ul><p><img src=".\img\CreateBranch.png" alt=""></p><ul><li>这是创建后的新分支</li></ul><p><img src=".\img\CreateBranch1.png" alt=""></p><h4 id="切换分支-Checkout"><a href="#切换分支-Checkout" class="headerlink" title="切换分支(Checkout)"></a>切换分支(Checkout)</h4><ul><li>黑色加粗的字体表示当前分支</li><li>选中你要切换的分支右键checkout/双击就可以任意切换分支</li></ul><p><img src=".\img\CheckoutBranch1.png.png" alt=""></p><h4 id="合併分支-Merge"><a href="#合併分支-Merge" class="headerlink" title="合併分支(Merge)"></a>合併分支(Merge)</h4><ul><li>首先切换到自己的分支</li><li>选中你要合併的分支右键，直接点击确定合併（如图所示）</li></ul><p><img src=".\img\CheckoutBranch.png" alt=""> </p><ul><li>合併后推送远端</li></ul><p><img src=".\img\Tuisong.png" alt=""></p><h4 id="删除分支-Delete-Branch"><a href="#删除分支-Delete-Branch" class="headerlink" title="删除分支(Delete Branch)"></a>删除分支(Delete Branch)</h4><ul><li>点击Branch按钮，切换到删除分支画面(Delete Branches)</li><li>选择你想要删除的分支，点击删除分支即可</li></ul><p><img src=".\img\DeleteBranch.png" alt=""></p><h3 id="标籤-Tag"><a href="#标籤-Tag" class="headerlink" title="标籤(Tag)"></a>标籤(Tag)</h3><h4 id="标籤简介"><a href="#标籤简介" class="headerlink" title="标籤简介"></a>标籤简介</h4><ul><li>在我们开发反覆运算过程中，会遇到这种情况，当前的版本是1.0.0。但需要找到版本号0.5.0的版本提交时，可能因为时间久远，不能快速定位到当时V0.5.0的提交记录，这个时候我们就需要进行标籤管理了</li></ul><h4 id="添加标籤"><a href="#添加标籤" class="headerlink" title="添加标籤"></a>添加标籤</h4><ul><li>右键提交记录然后选择Tag</li></ul><p><img src=".\img\标籤01.png" alt=""></p><ul><li>输入标籤名称</li><li>点击AddTag</li></ul><p><img src=".\img\标籤02.png" alt=""></p><ul><li>此时可以看到该版本出现了一个标籤名</li><li>通过点击右键可以进行一些操作</li></ul><p><img src=".\img\标籤03.png" alt=""></p><h3 id="创建子模组"><a href="#创建子模组" class="headerlink" title="创建子模组"></a>创建子模组</h3><ul><li>先在gitea储存库创建两个项目，如Project和myTest，这裡将myTest设置为Project的子模组</li><li>在Project的仓库(Repository)设置裡选择添加子模组(Add Submodule)</li></ul><p><img src=".\img\Mb.png" alt=""></p><ul><li>在添加子模组弹窗输入要添加的子模组URL</li></ul><p><img src=".\img\Mb.png" alt=""></p><ul><li>自动产生.gitmodules文件,之后提交推送到远端</li></ul><p><img src=".\img\Mc.png" alt=""></p><ul><li>此时远程储存库子模组(myTest)已经添加成功</li></ul><p><img src=".\img\Mf.png" alt=""></p><h3 id="编辑衝突"><a href="#编辑衝突" class="headerlink" title="编辑衝突"></a>编辑衝突</h3><ul><li>如果两个人同时在同一个档进行操作，合併时就会出现衝突</li></ul><p><img src=".\img\Bja.png" alt=""></p><ul><li>在实际开发中一般找&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;和&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;这种 =====这种符号就知道哪裡衝突了</li></ul><p><img src=".\img\Bjb.png" alt=""></p><ol><li><p>右键单击衝突文件，选择解决衝突，这裡有两个选项:</p><ul><li>使用 我的版本 解决衝突</li><li>使用 他人版本 解决衝突</li></ul></li><li><p>採用其中一人的版本，那麽衝突档中就会只保留该人修改的代码</p></li><li>最后再重新提交推送到远程仓库</li></ol><p><img src=".\img\Bjc.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;SourceTree 是一款提供 GUI 界面来管理版本控制内容的软体，让你可以直接在这款软体内看到每一个 Branch 的线图，从 Commit 到 Branch 的动作，或是在节点上加上 Tag 来方便管理，在 SourceTree 通通做得到。&lt;/p&gt;
&lt;h3 id=
      
    
    </summary>
    
    
      <category term="技术分享" scheme="http://example.com/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>无名小栈</title>
    <link href="http://example.com/2021/04/08/hello-world/"/>
    <id>http://example.com/2021/04/08/hello-world/</id>
    <published>2021-04-08T13:19:38.680Z</published>
    <updated>2021-04-18T07:39:45.161Z</updated>
    
    <content type="html"><![CDATA[<h3 id="欢迎来到我的-Blog！部分功能页面正在开发完善中……"><a href="#欢迎来到我的-Blog！部分功能页面正在开发完善中……" class="headerlink" title="欢迎来到我的 Blog！部分功能页面正在开发完善中……"></a>欢迎来到我的 Blog！部分功能页面正在开发完善中……</h3><ul><li>其实早在之前就有建Blog的想法，因为生活的苟且（搬砖人），所以暂时放下了远方啊。主要目的就是记录生活，一些所思所想，分享技术知识。建立一个属于自己的树洞。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;欢迎来到我的-Blog！部分功能页面正在开发完善中……&quot;&gt;&lt;a href=&quot;#欢迎来到我的-Blog！部分功能页面正在开发完善中……&quot; class=&quot;headerlink&quot; title=&quot;欢迎来到我的 Blog！部分功能页面正在开发完善中……&quot;&gt;&lt;/a&gt;欢迎来到我
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://example.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
