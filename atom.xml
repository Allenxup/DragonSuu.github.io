<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>年少有爲</title>
  
  <subtitle>Dragonの</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-04-11T09:43:04.081Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>hailong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RESTful</title>
    <link href="http://example.com/2021/04/11/RESTful/"/>
    <id>http://example.com/2021/04/11/RESTful/</id>
    <published>2021-04-11T01:34:19.000Z</published>
    <updated>2021-04-11T09:43:04.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RESTful"><a href="#RESTful" class="headerlink" title="RESTful"></a>RESTful</h2><p>RESTful 是一種系統開發設計風格、原則。可視情況調整，以下參考來源 RFC5789 (<a href="https://tools.ietf.org/html/rfc5789)。">https://tools.ietf.org/html/rfc5789)。</a></p><hr><h4 id="Noun"><a href="#Noun" class="headerlink" title="Noun"></a>Noun</h4><ul><li>一般資源</li></ul><p>​          通用於一律使用複數名詞</p><p>​                  例如：/books 或 /books/123。但有部分人認為應該使用單數名詞，因為： /book/123 看似比 /books/123 合理。但想想檔案                     系統的目錄命名 (例如/Users或/Documents)，其實用複數也沒問題。複數可以保持API endpoint的一致性，所以一般資源建議用複數。</p><ul><li>唯一資源：對 client 而言只有一份的資源</li></ul><p>​              通用於單數名詞</p><p>​                      例如：user 是指目前驗證的使用者，使用者永遠只能同時登入一個使用者</p><h4 id="Http-Method"><a href="#Http-Method" class="headerlink" title="Http Method"></a>Http Method</h4><table>    <tr align="center">        <th>Method</th>        <th>Idempotent</th>        <th>Safe</th>        <th>CRUD</th>        <th>OO</th>        <th>生活動詞</th>        <th>用途</th>    </tr>    <tr>        <td rowspan='2'>GET</td>        <td rowspan='2'>Y</td>        <td rowspan='2'>Y</td>        <td rowspan='2'>Read</td>        <td rowspan='2'>get</td>        <td>get</td>        <td>取得資料</td>    </tr>    <tr>       <td>list</td>       <td>列出資料</td>    </tr>    <tr>        <td rowspan='2'>POST</td>        <td rowspan='2'></td>        <td rowspan='2'></td>        <td rowspan='2'>Create</td>        <td rowspan='2'>add</td>        <td>create</td>        <td>建立一個可以完全獨立存在的實體</td>    </tr>    <tr>        <td>add</td>        <td>增加一個必須依賴於某個實體的實體</td>    </tr>    <tr>        <td rowspan='2'>PUT</td>        <td rowspan='2'>Y</td>        <td rowspan='2'></td>        <td rowspan='3'>Update</td>        <td rowspan='3'>set</td>        <td>replace</td>        <td>取代一個關係，已存在時先刪除後建立，不存在時直接建立</td>    </tr>    <tr>        <td>add</td>        <td>附加唯一關係，兩個關係實體可以互相獨立存在，且已經存在</td>    </tr>    <tr>        <td>PATCH</td>        <td></td>        <td></td>        <td>edit</td>        <td>編輯某個實體</td>    </tr>    <tr>        <td>DELETE</td>        <td></td>        <td></td>        <td>Delete</td>        <td>remove</td>        <td>remove delete</td>        <td>刪除某個實體</td>    </tr>    </table><ul><li>Safe：該操作不會改變伺服器端的資源狀態 (而且結果可以被cache)，屬於 Safe 的操作必定屬於 Idempotent</li><li>Idempotent (冪等性)：該操作不管做1遍或做n遍，都會得到同樣的資源狀態結果 (但不一定得到同樣的回傳值，例如第2次DELETE請求可能回傳404)，因此client端可以放心retry</li></ul><h4 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h4><ul><li>SAFE：每次執行操作時，GET 只有讀取 Resource，不會改變到任何的 Resource (資源, 資料)</li><li>Idempotent：每次執行操作時，GET 只有讀取 Resource，不會改變到任何的 Resource (資源, 資料)，所以任何資源的任何狀態都是一樣的</li></ul><h4 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h4><ul><li><p>每次執行操作時，POST 都會建立一個 Resource (資源, 資料)</p><ul><li>範例：建立使用者<ul><li>執行第一次時：建立一個 name = “帥小慶” 的 user，但其 id = 1</li><li>執行第二次時：建立一個 name = “帥小慶” 的 user，但其 id = 2，發送同樣的請求，可每次都是不同的 Resource</li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token constant">POST</span> <span class="token operator">/</span>usersData<span class="token operator">:</span>  <span class="token punctuation">&#123;</span>    <span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"帥小慶"</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Create：建立一個可以完全獨立存在的實體</p><ul><li><p>範例：建立使用者</p><p>​        建立使用者前不需要建立任何的東西，就可以建立使用者了，使用者是可以完全獨立的存在</p></li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token constant">POST</span> <span class="token operator">/</span>usersData<span class="token operator">:</span>  <span class="token punctuation">&#123;</span>    <span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"帥小慶"</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>Add：增加一個<strong>必須</strong>依賴於某個實體的實體</p><p>​       資料結構：1對多的關係</p></li><li><p>範例：Add a public key on behalf of a user 增加一個代表使用者的公鑰 (Gitea API)</p><p>​        增加這個公鑰之前，使用者必須存在，公鑰必須歸屬於某個使用者之下</p><p>​        公鑰跟姓名一樣，使用相同電腦的公鑰就會相同，但不表示是同一個使用者，故公鑰也會有自己的 ID</p><p>​        我每次增加公鑰時，都將生成不同的公鑰 ID</p><pre class="line-numbers language-none"><code class="language-none">POST&#x2F;admin&#x2F;users&#x2F;&#123;username&#125;&#x2F;keys<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h4><ul><li><p>Idempotent：每次執行操作時，PUT 都會取代 Resource，不管操作幾次，使用者獲取得 Resource 結果都是一樣的</p></li><li><p>Replace：不論資源如何，最終的資源狀態都是一樣的</p><p>​     Resource 已存在時，或許不理會、或許先刪除後建立 (取代)</p><p>​     Resource 不存在時，直接建立</p></li><li><p>Add：添加唯一關係，建立這個唯一關係前，兩個關連實體都必須存在。在沒有建立關係前，兩個關連實體都可以互相獨立存在</p></li><li><p>資料結構應為：多對多，且兩個關連實體的 PK，同時也是關係實體的 PK、FK</p></li></ul><ul><li><p>範例：增加使用者與角色的關係</p><p>​        增加使用者跟角色的關係前，使用者跟角色都必須存在；增加使用者跟角色的關係前，使用者跟角色可以獨立存在</p><p>​        使用者 23240，跟角色 2，的關係最多只能有一條關係 (使用者 23240 有角色 2 )，最少沒有關係 (使用者 23240 沒有角色 2 )</p><p>​        執行第二次操作時，使用者 23240 跟角色 2 的從屬關係仍然存在，也不會跑出第二條使用者 23240 跟角色 2 的從屬關係</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token constant">PUT</span> user<span class="token operator">/</span><span class="token punctuation">&#123;</span>account<span class="token punctuation">&#125;</span><span class="token operator">/</span>rolesData  <span class="token punctuation">&#123;</span>    <span class="token string">"role_id"</span><span class="token operator">:</span> <span class="token string">"2"</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>範例：Follow a user 關注一個使用者 (Gitea)</p><p>​       增加關注關係時，關注者與被關注者 (都是使用者) 都必須存在；增加關注關係時，關注者與被關注者 (都是使用者) 都必須存在</p><p>​      關注者使用者 23240，跟被關注者使用者 F3860056，的關係最多只能有一條關係 (23240 關注 F3860056)，最少沒有關係        (23240 不關注 F3860056)</p><p>​      執行第二次操作時，關注者 23240 跟被關注者 F3860056 的關注關係仍然存在，也不會跑出第二條關注者 23240 跟被關注者 F3860056 的關注關係</p><pre class="line-numbers language-none"><code class="language-none">PUT&#x2F;user&#x2F;following&#x2F;&#123;username&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="PATCH"><a href="#PATCH" class="headerlink" title="PATCH"></a>PATCH</h4></li><li><p>Edit：編輯可獨立存在、且已經存在的實體，也就是產生新版本的實體，可能會影響其他 Resource</p></li><li><p>範例：編輯使用者</p><p>​      編輯使用者，使用者已經存在，且我們可能有紀錄編輯時間、編輯人、編輯IP，所以每次的編輯都會造成不一樣的結果</p><p>​             第一次編輯使用者，更新時間變為 08:00，編輯人 23240，IP 10.151.110.165</p><p>​             第二次編輯使用者，更新時間變為 09:00，編輯人 23241，IP 10.151.110.144</p><pre class="line-numbers language-none"><code class="language-none">PATCH &#x2F;users&#x2F;&#123;account&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h4><ul><li><p>Idempotent：每次執行操作時，DELETE 都會刪除相同的東西</p></li><li><p>範例：刪除使用者</p><p>​         第一次刪除使用者23240，刪除使用者23240</p><p>​        第二次刪除使用者23240，還是刪除使用者23240，只不過使用者 23240 不存在了</p><pre class="line-numbers language-none"><code class="language-none">DELETE &#x2F;users&#x2F;&#123;account&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="HTTP-Status-Code"><a href="#HTTP-Status-Code" class="headerlink" title="HTTP Status Code"></a>HTTP Status Code</h4><p>HTTP状态码（HTTP Status Code）是用以表示网页服务器HTTP响应状态的3位数字代码。所有状态码的第一个数字代表了响应的五种状态之一。 除非另有说明，状态码是HTTP / 1.1标准（RFC 7231）的一部分。</p><p>而关于 RESTful API 的请求状态，通常有以下两种设计方案：</p><ul><li>方案一：使用 HTTP 状态码来表示请求状态，200 时返回的内容就是数据；</li><li>方案二：所有接口都返回 200 ，在响应内容里约定 错误码 或 錯誤信息</li></ul><p>在實際應用中，應據具體情景及需要進行選擇與調整。<br><table>    <tr align='center'>       <th>方案</th>        <th colspan='2'>優劣比較</th>    </tr>    <tr>        <td rowspan='2'>方案一</td>        <td>優點</td>        <td>對服務端來說較為簡單方便</td>    </tr>    <tr>        <td>缺點</td>        <td>客戶端難以根據狀態碼處理複雜問題</td>    </tr>    <tr>        <td rowspan='2'>方案二</td>        <td>優點</td>        <td>方便對返回資料進行統一處理和細細微性的控制</td>    </tr>    <tr>        <td>缺點</td>        <td>相當於放棄了HTTP狀態碼的語義</td>    </tr></table></p><h4 id="常用HTTP狀態碼"><a href="#常用HTTP狀態碼" class="headerlink" title="常用HTTP狀態碼"></a>常用HTTP狀態碼</h4><table><thead><tr><th style="text-align:left"><strong>Code</strong></th><th style="text-align:left"><strong>Message</strong></th><th style="text-align:left"><strong>用途</strong></th></tr></thead><tbody><tr><td style="text-align:left"><strong>1XX</strong></td><td style="text-align:left"><strong>Informational response</strong></td><td style="text-align:left"><strong>此類狀態碼通常代表的響應都是信息性的，告訴客戶端可以進行下一步操作。</strong></td></tr><tr><td style="text-align:left">100</td><td style="text-align:left">Continue</td><td style="text-align:left">表示服務端已接收到請求頭，客戶端可以繼續發送請求體(如POST請求)。</td></tr><tr><td style="text-align:left">101</td><td style="text-align:left">Switching Protocols</td><td style="text-align:left">表示服務端支持更優協議，讓客戶端在服務端更換協議後重新訪問。</td></tr><tr><td style="text-align:left"><strong>2XX</strong></td><td style="text-align:left"><strong>Successful</strong></td><td style="text-align:left"><strong>此類狀態碼通常代表請求已成功被服務端接收、理解并接受。</strong></td></tr><tr><td style="text-align:left">200</td><td style="text-align:left">OK</td><td style="text-align:left">表示請求成功。</td></tr><tr><td style="text-align:left">201</td><td style="text-align:left">Created</td><td style="text-align:left">表示請求已被實現，通常是在成功創建了某個資源。</td></tr><tr><td style="text-align:left">202</td><td style="text-align:left">Accepted</td><td style="text-align:left">表示請求已被服務端接收，但尚未進行處理。</td></tr><tr><td style="text-align:left">204</td><td style="text-align:left">No Content</td><td style="text-align:left">表示請求成功，但不會返回任何內容。</td></tr><tr><td style="text-align:left">205</td><td style="text-align:left">Reset Content</td><td style="text-align:left">表示請求成功，但不會返回任何內容，並且要求客戶端重置表單。</td></tr><tr><td style="text-align:left"><strong>3XX</strong></td><td style="text-align:left"><strong>Redirect</strong></td><td style="text-align:left"><strong>此類狀態碼通常代表本次請求需要客戶端採取進一步操作才能完成。通常用於 重定向。 </strong></td></tr><tr><td style="text-align:left">300</td><td style="text-align:left">Multiple Choices</td><td style="text-align:left">表示請求的資源有多個供可選擇，客戶端可自行選擇一個進行請求的重定向。</td></tr><tr><td style="text-align:left">301</td><td style="text-align:left">Moved Permanently</td><td style="text-align:left">表示請求的資源已經永久地移動到了新位置，並且將在Location域中攜帶該資源新的URI。</td></tr><tr><td style="text-align:left">304</td><td style="text-align:left">Not Modified</td><td style="text-align:left">表示請求的資源無發生修改，將不會返回任何資源。</td></tr><tr><td style="text-align:left"><strong>4XX</strong></td><td style="text-align:left"><strong>Client Error</strong></td><td style="text-align:left"><strong>此類狀態碼通常代表客戶端可能出現了錯誤。</strong></td></tr><tr><td style="text-align:left">400</td><td style="text-align:left">Bad Request</td><td style="text-align:left">表示客戶端發出的請求有誤(格式、大小、無效的…)，服務端不能/不會處理該請求。</td></tr><tr><td style="text-align:left">401</td><td style="text-align:left">Unauthorized</td><td style="text-align:left">表示客戶端未能提供必要的驗證，服務端拒絕提供資源。</td></tr><tr><td style="text-align:left">403</td><td style="text-align:left">Forbidden</td><td style="text-align:left">表示服務端理解了該請求，但客戶端沒有足夠權限以訪問，遂拒絕提供該資源。</td></tr><tr><td style="text-align:left">404</td><td style="text-align:left">Not Found</td><td style="text-align:left">表示服務端無法找到請求的資源，其可能已經暫時(永久)失效。</td></tr><tr><td style="text-align:left">408</td><td style="text-align:left">Request Timeout</td><td style="text-align:left">表示請求超時。</td></tr><tr><td style="text-align:left">409</td><td style="text-align:left">Conflict</td><td style="text-align:left">表示請求的資源發送了衝突，通常是PUT請求。</td></tr><tr><td style="text-align:left">410</td><td style="text-align:left">Gone</td><td style="text-align:left">表示請求的資源已經永久失效，客戶端不應再次請求。</td></tr><tr><td style="text-align:left">411</td><td style="text-align:left">Length Required</td><td style="text-align:left">表示服務端拒絕在沒有定義Content-Length頭的情況下接收該請求。</td></tr><tr><td style="text-align:left"><strong>5XX</strong></td><td style="text-align:left"><strong>Server Error</strong></td><td style="text-align:left"><strong>此類狀態碼通常代表由於服務端的原因，導致無法完成請求。</strong></td></tr><tr><td style="text-align:left">500</td><td style="text-align:left">Internal Server Error</td><td style="text-align:left">表示由於服務端遇到意料之外的變故，導致無法完成請求。</td></tr><tr><td style="text-align:left">501</td><td style="text-align:left">Not Implemented</td><td style="text-align:left">表示服務端不支持完成請求所需的功能，導致無法完成請求。</td></tr><tr><td style="text-align:left">502</td><td style="text-align:left">Bad Gateway</td><td style="text-align:left">表示作為網関或代理的服務段在執行請求時，從上游服務器獲得了無效的響應。</td></tr><tr><td style="text-align:left">503</td><td style="text-align:left">Service Unavailable</td><td style="text-align:left">表示由於某些原因(服務器超載或系統維護等)，導致暫時無法完成請求。</td></tr><tr><td style="text-align:left">504</td><td style="text-align:left">Gatewy Timeout</td><td style="text-align:left">表示作為網関或代理的服務段在執行請求時，未能及時從上游服務器獲得響應。</td></tr><tr><td style="text-align:left">505</td><td style="text-align:left">HTTP Version Not  Supported</td><td style="text-align:left">表示服務端不支持請求的HTTP協議版本，導致無法完成請求。</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;RESTful&quot;&gt;&lt;a href=&quot;#RESTful&quot; class=&quot;headerlink&quot; title=&quot;RESTful&quot;&gt;&lt;/a&gt;RESTful&lt;/h2&gt;&lt;p&gt;RESTful 是一種系統開發設計風格、原則。可視情況調整，以下參考來源 RFC5789 (&lt;a h
      
    
    </summary>
    
    
      <category term="技术分享" scheme="http://example.com/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>MVC</title>
    <link href="http://example.com/2021/04/11/MVC/"/>
    <id>http://example.com/2021/04/11/MVC/</id>
    <published>2021-04-11T01:30:25.000Z</published>
    <updated>2021-04-11T09:43:04.111Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><p>MVC是一个设计模式，它强制性的使应用程序的输入、处理和输出分开。使用MVC应用程序被分成三个核心部件：模型、视图、控制器。它们各自处理自己的任务。</p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>MVC（Model–View–Controller）是软件工程中的一种软件架构模式，把软件系统分为三个基本部分：模型（Model）、视图（View）和控制器（Controller）。</li><li>在MVC中，M层处理数据，业务逻辑等；V层处理界面的显示结果；C层起到桥梁的作用，来控制V层和M层通信以此来达到分离视图显示和业务逻辑层。</li></ul><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><ul><li>基本流程</li></ul><ol><li>View接受用户的交互请求(url,ajax)</li><li>View将请求通过路由转交给特定的Controller</li><li>Controller操作Model进行数据请求，Model操作DB进行对应的数据操作（增删改查CRUD）</li><li>Model返回结果，Controller返回数据给View渲染</li><li>View渲染完成后，将数据结果呈现给用户</li></ol><ul><li>图解</li></ul><p><img src=".\img\MVC.png" style="zoom:45%;" /></p><ul><li>总结</li></ul><p>首先控制器接收用户的请求，并决定应该调用哪个模型来进行处理，然后模型用业务逻辑来处理用户的请求并返回数据，最后控制器用相应的视图格式化模型返回的数据，并通过表示层呈现给用户。</p><h3 id="代碼實作"><a href="#代碼實作" class="headerlink" title="代碼實作"></a>代碼實作</h3><ul><li>前台View发送请求到Controller</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$t<span class="token punctuation">.</span>ajax<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token comment">/* ① */</span>    <span class="token string">'url'</span><span class="token operator">:</span> <span class="token operator">/</span>users<span class="token punctuation">,</span>   <span class="token string">'success'</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">usersData</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// do something 当后台返回数据后渲染页面呈现给用户 /* ⑦ */</span>   <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Controller</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//users controller</span>Route<span class="token operator">:</span><span class="token operator">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'getUsers'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//路由根据请求匹配对应的Controller与方法，课内在请求时指定了Controller所以只需匹配方法。/* ② */</span>   <span class="token comment">/**   * 查询联系人   * @return object 联系人信息   */</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ③ */</span>    $start <span class="token operator">=</span> Input<span class="token operator">:</span><span class="token operator">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'start'</span><span class="token punctuation">,</span> <span class="token constant">FILTER_SANITIZE_NUMBER_INT</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>                <span class="token string">'default'</span> <span class="token operator">=></span> <span class="token number">0</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    $count <span class="token operator">=</span> Input<span class="token operator">:</span><span class="token operator">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'count'</span><span class="token punctuation">,</span> <span class="token constant">FILTER_SANITIZE_NUMBER_INT</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>                <span class="token string">'default'</span> <span class="token operator">=></span> <span class="token number">15</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    $usersData<span class="token operator">=</span> UserModel<span class="token operator">:</span><span class="token operator">:</span><span class="token function">getUsers</span><span class="token punctuation">(</span>$start<span class="token punctuation">,</span> $count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Controller根据前台参数从Model中获取数据 /* ④ */</span>    $output <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">foreach</span> <span class="token punctuation">(</span><span class="token parameter">$usersData <span class="token keyword">as</span> $user</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      $output<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">array</span><span class="token punctuation">(</span>          <span class="token string">'id'</span> <span class="token operator">=></span> $user<span class="token operator">-</span><span class="token operator">></span>id<span class="token punctuation">,</span>          <span class="token string">'name'</span> <span class="token operator">=></span> $user<span class="token operator">-</span><span class="token operator">></span>name<span class="token punctuation">,</span>          <span class="token string">'tel'</span> <span class="token operator">=></span> $user<span class="token operator">-</span><span class="token operator">></span>tel<span class="token punctuation">,</span>          <span class="token string">'gender'</span> <span class="token operator">=></span> $user<span class="token operator">-</span><span class="token operator">></span>gender<span class="token punctuation">,</span>          <span class="token string">'age'</span> <span class="token operator">=></span> $user<span class="token operator">-</span><span class="token operator">></span>age      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> Output<span class="token operator">:</span><span class="token operator">:</span><span class="token function">json</span><span class="token punctuation">(</span>$output<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* ⑥ */</span> <span class="token comment">//将取得的数据按照约定格式回传给前台 </span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Model</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//Model从DB中进行相应的数据操作，返回数据结果。</span>  <span class="token keyword">static</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token parameter">$start<span class="token punctuation">,</span> $count</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ⑤ */</span>    <span class="token keyword">return</span> self<span class="token operator">:</span><span class="token operator">:</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token operator">-</span><span class="token operator">></span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'tel'</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token operator">-</span><span class="token operator">></span><span class="token function">limit</span><span class="token punctuation">(</span>$start<span class="token punctuation">,</span> $count<span class="token punctuation">)</span>                    <span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>总结</li></ul><p>对照图解，简单总结具体工作流程为：<strong>①→②→③→④→⑤→⑥→⑦</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MVC&quot;&gt;&lt;a href=&quot;#MVC&quot; class=&quot;headerlink&quot; title=&quot;MVC&quot;&gt;&lt;/a&gt;MVC&lt;/h2&gt;&lt;p&gt;MVC是一个设计模式，它强制性的使应用程序的输入、处理和输出分开。使用MVC应用程序被分成三个核心部件：模型、视图、控制器。它们各自
      
    
    </summary>
    
    
      <category term="技术分享" scheme="http://example.com/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>SoureTree</title>
    <link href="http://example.com/2021/04/11/SoureTree/"/>
    <id>http://example.com/2021/04/11/SoureTree/</id>
    <published>2021-04-11T01:29:29.000Z</published>
    <updated>2021-04-11T09:43:04.097Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SoureTree"><a href="#SoureTree" class="headerlink" title="SoureTree"></a>SoureTree</h2><p>SourceTree 是一款提供 GUI 界面來管理版本控制內容的軟體，讓你可以直接在這款軟體內看到每一個 Branch 的線圖，從 Commit 到 Branch 的動作，或是在節點上加上 Tag 來方便管理，在 SourceTree 通通做得到。</p><h3 id="常用功能介紹"><a href="#常用功能介紹" class="headerlink" title="常用功能介紹"></a>常用功能介紹</h3><ul><li>Commint:將本地修改過的 檔提交到本地庫中</li><li>Pull:獲取遠程庫最新版本到本地，並且自動merge</li><li>Push:將本地的最新資訊發送給遠程庫</li><li>Fretch:獲取遠程庫最新版本到本地，不會自動merge</li><li>Branch:創建一個分支，該分支不會影響主分支</li><li>Merge:從指定的commit合併到當前分支，用來合併兩個分支</li><li>可以這樣說Pull=Fetch+Merge</li></ul><p><img src=".\img\介紹.png" alt=""></p><h3 id="使用者資訊設置"><a href="#使用者資訊設置" class="headerlink" title="使用者資訊設置"></a>使用者資訊設置</h3><ul><li>每次commit都會用用戶名和郵箱記錄</li><li>用它來作為你上傳到遠程庫的身份標識</li></ul><p>選擇Tools =&gt; Options =&gt; 選擇General 按下圖所示配置個人信息(遠程倉庫郵箱信息需保持一致)</p><p><img src=".\img\SourcetreeOptions.png" alt=""></p><h3 id="常用功能演示"><a href="#常用功能演示" class="headerlink" title="常用功能演示"></a>常用功能演示</h3><h4 id="克隆-clone"><a href="#克隆-clone" class="headerlink" title="克隆(clone)"></a>克隆(clone)</h4><p><img src=".\img\Clone.png" alt=""></p><ol><li>此時可以看到本地會出現一個版本庫，接著可往該路徑放入一個000.html的文件</li></ol><p><img src=".\img\新增文件.png" alt=""></p><h4 id="提交-commit"><a href="#提交-commit" class="headerlink" title="提交(commit)"></a>提交(commit)</h4><ol><li>在本地庫放入檔後，F5刷新後再單擊Stage Selected(暫存所選文件）</li><li>輸入提交信息</li><li>點擊commit</li></ol><p><img src=".\img\Commit.png" alt=""></p><ul><li>此時可以看到歷史選項卡中,在master分支提交了新增,但是這個master分支是本地倉庫的,遠程倉庫現在並沒有文件</li></ul><p><img src=".\img\Commit02.png" alt=""></p><h4 id="推送-Push"><a href="#推送-Push" class="headerlink" title="推送(Push)"></a>推送(Push)</h4><ol><li>點擊Push(注意：Push前應先Pull拉取最新代碼，避免衝突，我這裡因遠程倉庫是空的就不用)</li><li>勾選本地master分支推送到遠程master</li><li>當勾選此選項時將推送所有標籤</li><li>單擊Push</li></ol><p><img src=".\img\Push.png" alt=""></p><ul><li>可以看到最新版本裏面master和origin/master,這說明本地master分支和遠程master分支是同步的</li></ul><p><img src=".\img\同步.png" alt=""></p><ul><li>可以看到遠程倉庫已經有一次提交記錄,且就是剛才我們提交的文件</li></ul><p><img src=".\img\同步02.png" alt=""></p><h4 id="獲取-Fetch"><a href="#獲取-Fetch" class="headerlink" title="獲取(Fetch)"></a>獲取(Fetch)</h4><ol><li>我們先編輯剛才提交的文件，在該文件中新增一行</li><li>點擊提交更改</li></ol><p><img src=".\img\修改.png" alt=""></p><ul><li>單擊Fetch(獲取)</li><li>勾選從所有遠程獲取更新</li><li>點擊ok,將從遠程倉庫中獲取更新,但不會合併，也不會使你的本地倉庫改變</li></ul><p><img src=".\img\獲取02.png" alt=""></p><h4 id="拉取-Pull"><a href="#拉取-Pull" class="headerlink" title="拉取(Pull)"></a>拉取(Pull)</h4><ol><li>這時候會提示遠程倉庫有一個更新，點擊Pull</li><li>單擊ok將直接從遠程倉庫拉取到本地倉庫並且自動合併(注意：當確定需要和遠程代碼合併時可以直接用Pull不需要先Fetch)</li><li>此時可以到歷史選項中有一個更新</li></ol><p><img src=".\img\更新.png" alt=""></p><ul><li>遠程倉庫新增的行已經同步到本地</li></ul><p><img src=".\img\更新2.png" alt=""></p><h4 id="分支創建-Brach"><a href="#分支創建-Brach" class="headerlink" title="分支創建(Brach)"></a>分支創建(Brach)</h4><ul><li>點擊Branch按鈕，輸入新分支的名稱</li><li>點擊Create Brach創建一個新的分支進行開發</li></ul><p><img src=".\img\CreateBranch.png" alt=""></p><ul><li>這是創建後的新分支</li></ul><p><img src=".\img\CreateBranch1.png" alt=""></p><h4 id="切換分支-Checkout"><a href="#切換分支-Checkout" class="headerlink" title="切換分支(Checkout)"></a>切換分支(Checkout)</h4><ul><li>黑色加粗的字體表示當前分支</li><li>選中你要切換的分支右鍵checkout/雙擊就可以任意切換分支</li></ul><p><img src=".\img\CheckoutBranch1.png.png" alt=""></p><h4 id="合併分支-Merge"><a href="#合併分支-Merge" class="headerlink" title="合併分支(Merge)"></a>合併分支(Merge)</h4><ul><li>首先切換到自己的分支</li><li>選中你要合併的分支右鍵，直接點擊確定合併（如圖所示）</li></ul><p><img src=".\img\CheckoutBranch.png" alt=""> </p><ul><li>合併後推送遠端</li></ul><p><img src=".\img\Tuisong.png" alt=""></p><h4 id="刪除分支-Delete-Branch"><a href="#刪除分支-Delete-Branch" class="headerlink" title="刪除分支(Delete Branch)"></a>刪除分支(Delete Branch)</h4><ul><li>點擊Branch按鈕，切換到刪除分支畫面(Delete Branches)</li><li>選擇你想要刪除的分支，點擊刪除分支即可</li></ul><p><img src=".\img\DeleteBranch.png" alt=""></p><h3 id="標籤-Tag"><a href="#標籤-Tag" class="headerlink" title="標籤(Tag)"></a>標籤(Tag)</h3><h4 id="標籤簡介"><a href="#標籤簡介" class="headerlink" title="標籤簡介"></a>標籤簡介</h4><ul><li>在我們開發反覆運算過程中，會遇到這種情況，當前的版本是1.0.0。但需要找到版本號0.5.0的版本提交時，可能因為時間久遠，不能快速定位到當時V0.5.0的提交記錄，這個時候我們就需要進行標籤管理了</li></ul><h4 id="添加標籤"><a href="#添加標籤" class="headerlink" title="添加標籤"></a>添加標籤</h4><ul><li>右鍵提交記錄然後選擇Tag</li></ul><p><img src=".\img\標籤01.png" alt=""></p><ul><li>輸入標籤名稱</li><li>點擊AddTag</li></ul><p><img src=".\img\標籤02.png" alt=""></p><ul><li>此時可以看到該版本出現了一個標籤名</li><li>通過點擊右鍵可以進行一些操作</li></ul><p><img src=".\img\標籤03.png" alt=""></p><h3 id="創建子模組"><a href="#創建子模組" class="headerlink" title="創建子模組"></a>創建子模組</h3><ul><li>先在gitea儲存庫創建兩個項目，如Project和myTest，這裡將myTest設置為Project的子模組</li><li>在Project的倉庫(Repository)設置裡選擇添加子模組(Add Submodule)</li></ul><p><img src=".\img\Mb.png" alt=""></p><ul><li>在添加子模組彈窗輸入要添加的子模組URL</li></ul><p><img src=".\img\Mb.png" alt=""></p><ul><li>自動產生.gitmodules文件,之後提交推送到遠端</li></ul><p><img src=".\img\Mc.png" alt=""></p><ul><li>此時遠程儲存庫子模組(myTest)已經添加成功</li></ul><p><img src=".\img\Mf.png" alt=""></p><h3 id="編輯衝突"><a href="#編輯衝突" class="headerlink" title="編輯衝突"></a>編輯衝突</h3><ul><li>如果兩個人同時在同一個檔進行操作，合併時就會出現衝突</li></ul><p><img src=".\img\Bja.png" alt=""></p><ul><li>在實際開發中一般找&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;和&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;這種 =====這種符號就知道哪裡衝突了</li></ul><p><img src=".\img\Bjb.png" alt=""></p><ol><li><p>右鍵單擊衝突文件，選擇解決衝突，這裡有兩個選項:</p><ul><li>使用 我的版本 解決衝突</li><li>使用 他人版本 解決衝突</li></ul></li><li><p>採用其中一人的版本，那麼衝突檔中就會只保留該人修改的代碼</p></li><li>最後再重新提交推送到遠程倉庫</li></ol><p><img src=".\img\Bjc.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SoureTree&quot;&gt;&lt;a href=&quot;#SoureTree&quot; class=&quot;headerlink&quot; title=&quot;SoureTree&quot;&gt;&lt;/a&gt;SoureTree&lt;/h2&gt;&lt;p&gt;SourceTree 是一款提供 GUI 界面來管理版本控制內容的軟體，讓你可以直接
      
    
    </summary>
    
    
      <category term="技术分享" scheme="http://example.com/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>无名小栈</title>
    <link href="http://example.com/2021/04/08/hello-world/"/>
    <id>http://example.com/2021/04/08/hello-world/</id>
    <published>2021-04-08T13:19:38.680Z</published>
    <updated>2021-04-11T09:43:04.442Z</updated>
    
    <content type="html"><![CDATA[<h3 id="欢迎来到我的-Blog！部分功能页面正在开发完善中……"><a href="#欢迎来到我的-Blog！部分功能页面正在开发完善中……" class="headerlink" title="欢迎来到我的 Blog！部分功能页面正在开发完善中……"></a>欢迎来到我的 Blog！部分功能页面正在开发完善中……</h3><ul><li>其实早在之前就有建Blog的想法，因为生活的苟且（搬砖人），所以暂时放下了远方啊。主要目的就是记录生活，一些所思所想，分享技术知识。建立一个属于自己的树洞。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;欢迎来到我的-Blog！部分功能页面正在开发完善中……&quot;&gt;&lt;a href=&quot;#欢迎来到我的-Blog！部分功能页面正在开发完善中……&quot; class=&quot;headerlink&quot; title=&quot;欢迎来到我的 Blog！部分功能页面正在开发完善中……&quot;&gt;&lt;/a&gt;欢迎来到我
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://example.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
